@import "jnt-variables";
@import "jnt-functions";
@import "elements/icon/icon";
@import "layout/responsive/responsive";

@mixin block-padding($padding, $wrapper) {
  #{$wrapper} [data-body], #{$wrapper}[data-footer] {
    padding: $padding;
  }
}

@mixin block-fill($scheme, $wrapper) {
  & {
    background-color: map-get($scheme, background-color);
    #{$wrapper} [data-title] {
      color: map-get($scheme, title-color);
    }
  }
}

@mixin jnt-block($passed: (), $context: null, $deep: false, $strategy: 'changes') {
  $defs: (
    padding: (
      tiny: $jnt-gutter-tiny,
      small: $jnt-gutter-small,
      normal: $jnt-gutter-normal,
      big: $jnt-gutter-big,
      large: $jnt-gutter-large,
      huge: $jnt-gutter-huge,
    ),
    schemes: (
      primary: (
        background-color: $jnt-primary-background,
        title-color: $jnt-primary-color
      ),
      secondary: (
        background-color: $jnt-secondary-background,
        title-color: $jnt-primary-color
      ),
      success: (
        background-color: $jnt-success-color,
        title-color: $jnt-white-color
      ),
      fail: (
        background-color: $jnt-fail-color,
        title-color: $jnt-white-color
      ),
    ),
    overlay: (
      background-color: rgba($jnt-primary-background, 0.75),
      icon: (
        size: 40px,
      ),
    ),
  );

  $vars: $passed;
  $declare: false;
  $wrapper: null;

  @if $deep {
    $wrapper: '::ng-deep';
  }

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  :host, #{$context} {
    display: inline-flex;
    flex-direction: column;
    position: relative;
    min-height: 40px;
    box-shadow: $jnt-shadow-normal;
    border-radius: $jnt-corner-normal;
    box-sizing: border-box;
    &[data-width="fluid"] {
      width: 100%;
    }
    @if map-has-key($vars, schemes) {
      @each $scheme, $map in map-get($vars, schemes) {
        &[data-scheme='#{$scheme}'] {
          @include block-fill($map, $wrapper);
        }
      }
    }

    &[data-features*='adapted'] {
      @include for-mobile() {
        box-shadow: none;
        background-color: transparent;
        #{$wrapper} [data-title] {
          color: $jnt-primary-color;
        }
      }
    }

    @if map-has-key($vars, padding) {
      $padding: map-get($vars, padding);
      @each $padding, $map in $padding {
        &[data-padding = '#{$padding}'] {
          @include block-padding($map, $wrapper);
        }
      }
    }
  }

  #{$context} #{$wrapper} [data-title] {
    padding: 0 $jnt-gutter-normal;
    text-align: center;
    font-weight: $jnt-font-weight-bold;
    > div {
      padding: $jnt-gutter-normal 0;
      border-bottom: 1px solid $jnt-muted-color;
    }
  }

  #{$context} #{$wrapper} [data-loading], #{$context} #{$wrapper} [data-error], #{$context} #{$wrapper} [data-success] {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: $jnt-corner-normal;
    z-index: 1;
    @if map-has-key($vars, overlay) {
      $overlay: map-get($vars, overlay);
      background-color: map-get($overlay, background-color);
      @if map-has-key($overlay, icon) {
        $icon: map-get($overlay, icon);
        [data-icon] {
          @include jnt-icon((
            size: map-get($icon, size)
          ), '&');
        }
      }
    }
  }
}

