@import "jnt-variables";
@import "jnt-functions";

@mixin col-spacing($gutter) {
  & {
    margin-top: -$gutter;
    > :not(router-outlet) {
      margin-top: $gutter;
    }
  }
}

@mixin jnt-grid-row($passed: (), $context: null, $strategy: 'changes') {

  $defs: (
    gutters: (
      tiny: $jnt-gutter-tiny,
      small: $jnt-gutter-small,
      normal: $jnt-gutter-normal,
      big: $jnt-gutter-big,
      large: $jnt-gutter-large,
      huge: $jnt-gutter-huge,
    ),
  );

  $vars: $passed;
  $declare: false;

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  :host, #{$context} {
    @if $declare {
      display: flex;
      text-align: left;
      flex-wrap: wrap;

      &[data-align='start'] {
        align-items: flex-start;
      }
      &[data-align='center'] {
        align-items: center;
      }
      &[data-align='end'] {
        align-items: flex-end;
      }
      &[data-align='stretch'] {
        align-items: stretch;
      }

      &[data-justify='start'] {
        justify-content: flex-start;
      }
      &[data-justify='center'] {
        justify-content: center;
      }
      &[data-justify='end'] {
        justify-content: flex-end;
      }
      &[data-justify='between'] {
        justify-content: space-between;
      }
      &[data-justify='around'] {
        justify-content: space-around;
      }
      &[data-justify='evenly'] {
        justify-content: space-evenly;
      }
    }

    @if map-has-key($vars, gutters) {
      $gutters: map-get($vars, gutters);
      @each $gutter, $map in $gutters {
        &[data-spacing = '#{$gutter}'] {
          @include col-spacing($map);
        }
        &[data-gutter = '#{$gutter}'] {
          margin-left: -$map;
          margin-right: -$map;
          > * {
            padding-left: $map;
            padding-right: $map;
          }
        }
      }
    }
  }
}

@if $jnt-debug {
  @debug 'row compiled';
}
