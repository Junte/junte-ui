@import "jnt-variables";
@import "jnt-functions";
@import "elements/icon/icon";

@mixin jnt-informer($passed: (), $context: null, $strategy: 'changes') {

  $defs: (
    outer: (
      tiny: $jnt-gutter-tiny,
      small: $jnt-gutter-small,
      normal: $jnt-gutter-normal,
      big: $jnt-gutter-big,
      large: $jnt-gutter-large,
      huge: $jnt-gutter-huge
    )
  );

  $vars: $passed;
  $declare: false;

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  :host, #{$context} {
    @if $declare {
      &[data-placement='fixed'] {
        position: fixed;
      }
      top: 0;
      right: 0;
      bottom: 0;
      left: 0;
      z-index: 5;
      display: flex;
      align-items: center;
      justify-content: center;
      background: rgba($jnt-primary-color, .75);
      padding: $jnt-gutter-normal;
    }

    &[data-placement='absolute'] {
      position: absolute;

      @if map-has-key($vars, outer) {
        $outer: map-get($vars, outer);
        @each $outer, $map in $outer {
          &[data-outer = '#{$outer}'] {
            margin: -($map);
          }
        }
      }
    }
  }

  ul {
    @if $declare {
      color: white;
      margin: 0;
      max-width: 350px;

      li:not(:last-child) {
        margin-bottom: $jnt-gutter-small;
      }

      &[data-single] {
        padding: 0;
        list-style: none;
        font-size: 1.15em;

        li {
          text-align: center;
        }
      }
    }
  }

  [data-icon] {
    @include jnt-icon((color: $jnt-white-color, size: 50px), '&');
  }
}

@if $jnt-debug {
  @debug 'informer compiled';
}
