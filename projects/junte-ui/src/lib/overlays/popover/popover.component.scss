@import "jnt-variables";
@import "jnt-functions";

@mixin popover-padding($padding) {
  & {
    padding: $padding;
  }
}

@mixin jnt-popover($passed: (), $context: null, $deep: false, $strategy: 'changes') {

  $defs: (
    spacing: 12px,
    padding: (
      tiny: $jnt-gutter-tiny,
      small: $jnt-gutter-small,
      normal: $jnt-gutter-normal,
      big: $jnt-gutter-big,
      large: $jnt-gutter-large,
      huge: $jnt-gutter-huge,
    ),
    background: $jnt-primary-background,
  );

  $vars: $passed;
  $declare: false;
  $wrapper: null;

  @if $deep {
    $wrapper: '::ng-deep';
  }

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  :host, #{$context} {
    position: absolute;
    z-index: 100;
    user-select: text;
    padding: map-get($vars, spacing);
    display: none;

    @include for-mobile() {
      left: 0 !important;
      width: 100%;
      max-width: 100%;
      max-height: 100vh;
      overflow-y: auto;
      box-sizing: border-box;
    }

    [data-arrow] {
      position: absolute;
      fill: map-get($vars, background);
      [data-inner] {
        filter: if($jnt-theme-type == 'light', url(#popover_marker_shadow-light), url(#popover_marker_shadow-dark));
      }
    }

    &[data-dropdown='true'] {

      &[data-placement='top'], &[data-placement='bottom'] {
        padding: $jnt-gutter-tiny 0 0;
      }

      &[data-placement='left'], &[data-placement='right'] {
        padding: 0 0 0 $jnt-gutter-tiny;
      }

      @include for-mobile() {
        padding: $jnt-gutter-tiny map-get($vars, spacing) map-get($vars, spacing);
      }

      [data-arrow] {
        display: none;
      }

      [data-wrapper] {
        padding: $jnt-gutter-tiny 0;
      }
    }

    &[data-placement='top'] {
      [data-arrow] {
        transform: translateX(-50%);
        bottom: 0;
      }
    }

    &[data-placement='right'] {
      [data-arrow] {
        transform: translateY(-50%) rotate(90deg);
        left: 0;
      }
    }

    &[data-placement='bottom'] {
      [data-arrow] {
        transform: translateX(-50%) rotate(180deg);
        top: 0;
      }
    }

    &[data-placement='left'] {
      [data-arrow] {
        transform: translateY(-50%) rotate(-90deg);
        right: 0;
      }
    }
  }

  #{$context} #{$wrapper} [data-wrapper] {
    border-radius: $jnt-corner-small;
    box-shadow: $jnt-shadow-normal;
    background-color: map-get($vars, background);
    overflow: auto;

    @if map-has-key($vars, padding) {
      $padding: map-get($vars, padding);
      @each $padding, $map in $padding {
        &[data-padding = '#{$padding}'] {
          @include popover-padding($map);
        }
      }
    }

    [data-title] {
      font-weight: $jnt-font-weight-bold;
      margin-bottom: $jnt-gutter-normal;
      color: $jnt-primary-text-color;
    }
    [data-content] {
      max-width: 300px;
      color: $jnt-primary-text-color;
    }
  }
}

@if $jnt-debug {
  @debug 'popover compiled';
}
