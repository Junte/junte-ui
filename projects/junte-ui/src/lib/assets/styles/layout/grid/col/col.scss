@import "jnt-variables";

@mixin col-padding($padding) {
  & {
    padding-left: $padding;
    padding-right: $padding;
  }
}

@mixin jnt-grid-col($passed: (), $context: null, $strategy: 'changes') {

  $defs: (
    grid-columns: 12,
    padding: (
      tiny: $jnt-gutter-tiny,
      small: $jnt-gutter-small,
      normal: $jnt-gutter-normal,
      big: $jnt-gutter-big,
      large: $jnt-gutter-large,
      huge: $jnt-gutter-huge,
    ),
  );

  $vars: $passed;
  $declare: false;

  @if $passed == () or $strategy == 'merge' {
    $vars: map-merge($defs, $passed);
    $declare: true;
  }

  jnt-col[host=#{$jnt-col-host}], #{$context} {
    display: block;
    box-sizing: border-box;
    position: relative;

    @if map-has-key($vars, padding) {
      $padding: map-get($vars, padding);
      @each $padding, $map in $padding {
        &[data-padding = '#{$padding}'] {
          @include col-padding($map);
        }
      }
    }

    @each $breakpoints, $value in $grid-breakpoints {
      @media screen and (min-width: $value) {
        @for $i from 1 through map-get($vars, grid-columns) {
          &[data-#{$breakpoints} = '#{$i}'] {
            $width: $i/map-get($vars, grid-columns);
            flex: 0 0 percentage($width);
            max-width: percentage($width);
          }
        }
      }
    }

    @for $i from 1 through map-get($vars, grid-columns) {
      &[data-span = "#{$i}"] {
        $width: $i/map-get($vars, grid-columns);
        flex: 0 0 percentage($width);
        max-width: percentage($width);
      }
    }
  }
}
