@import "variables";
@import "elements/icon/icon";

@mixin input-size($size) {
  input, textarea {
    font-size: #{map-get($size, font-size)};
    min-height: #{map-get($size, height)};
    &[type='number'] {
      padding-right: calc(#{$jnt-gutter-small} * 2 + #{map-get($size, chevron)});
    }
  }
  [icon] ~ input {
    padding-left: calc(#{map-get($size, font-size)} + #{$jnt-gutter-normal} + #{$jnt-gutter-small});
  }
}

@mixin input($passed: (), $context: null, $strategy: 'changes') {

  $defs: (
    sizes: (
      small: (
        font-size: 11px,
        height: 30px,
        icon: 14px,
        chevron: 8px
      ),
      normal: (
        font-size: 14px,
        height: 38px,
        icon: 16px,
        chevron: 10px
      ),
      large: (
        font-size: 16px,
        height: 50px,
        icon: 18px,
        chevron: 12px
      ),
    ),
    states: (
      normal: (
        border-color: $jnt-control-border-color,
        hover: (
          border-color: $jnt-primary-color
        ),
        focus: (
          border-color: $jnt-primary-color,
          shadow: $jnt-shadow-primary
        ),
        disabled: (
          border-color: $jnt-control-disabled-border-color
        ),
      ),
      success: (
        border-color: $jnt-success-color,
        hover: (
          border-color: $jnt-success-color
        ),
        focus: (
          border-color: $jnt-success-color,
          shadow: null
        ),
      ),
      failed: (
        border-color: $jnt-fail-color,
        hover: (
          border-color: $jnt-fail-color
        ),
        focus: (
          border-color: $jnt-fail-color,
          shadow: null
        ),
      ),
    ),
  );

  $vars: $passed;
  $declare: false;

  @if $passed == () or $strategy == 'merge' {
    $vars: map-merge($defs, $passed);
    $declare: true;
  }

  :host, #{$context} {
    display: block;
    width: 100%;

    @if map-has-key($vars, states) {
      $states: map-get($vars, states);
      @each $state, $map in $states {
        &[state='#{$state}'] {
          input, textarea {
            border-color: map-get($map, border-color);
            @if map-has-key($map, focus) {
              $focus: map-get($map, focus);
              &:focus {
                box-shadow: map-get($focus, shadow);
                border-color: map-get($focus, border-color);
              }
            }
            @if map-has-key($map, hover) {
              $hover: map-get($map, hover);
              &:hover {
                border-color: map-get($hover, border-color);
              }
            }
            @if map-has-key($map, disabled) {
              $disabled: map-get($map, disabled);
              &:disabled {
                border-color: map-get($disabled, border-color);
              }
            }
          }
        }
      }
    }

    @if map-has-key($vars, sizes) {
      $sizes: map-get($vars, sizes);
      @each $size, $map in $sizes {
        &[size = '#{$size}'] {
          @include input-size($map);
          [icon] {
            @include icon((
              size: map-get($map, icon)
            ), '&');
          }
          [arrows] [icon] {
            @include icon((
              size: map-get($map, chevron)
            ), '&');
          }

        }
      }
    }

    &[textAlign="right"] {
      input, textarea {
        text-align: right;
      }
    }
    &[textAlign="left"] {
      input, textarea {
        text-align: left;
      }
    }
  }

  #{$context} form {
    display: inline-flex;
    align-items: stretch;
    width: 100%;
    position: relative;
    >[icon] {
      position: absolute;
      top: 50%;
      left: $jnt-gutter-normal;
      transform: translateY(-50%);
      color: $jnt-primary-text-light-color;
      fill: $jnt-primary-text-light-color;
      line-height: 0;
    }
    input, textarea {
      outline: 0;
      background-color: $jnt-control-background;
      color: $jnt-primary-text-color;
      width: 100%;
      padding: 0 $jnt-gutter-normal;
      border-radius: $jnt-corner-small;
      border: 1px solid;
      box-sizing: border-box;
      transition: all .3s;
      &:disabled {
        background-color: $jnt-control-disabled-background;
        color: $jnt-control-disabled-label-color;
        pointer-events: none;
        & + [arrows] {
          button {
            cursor: default;
          }
        }
      }
    }

    [label] {
      background-color: $jnt-control-field-label-background;
      padding: $jnt-control-field-label-padding;
      display: flex;
      align-items: center;
      border-top-left-radius: $jnt-corner-small - 1px;
      border-bottom-left-radius: $jnt-corner-small - 1px;
      color: $jnt-control-field-label-color;
      border: 1px solid $jnt-control-field-label-border-color;
      border-right: 0;
      white-space: nowrap;
      & ~ input,
      & ~  textarea {
        border-top-left-radius: 0;
        border-bottom-left-radius: 0;
        padding: 0 $jnt-gutter-normal;
      }
    }

    [arrows] {
      display: flex;
      flex-direction: column;
      position: absolute;
      top: 1px;
      right: 1px;
      bottom: 1px;
      button {
        flex: 1;
        padding: 0 $jnt-gutter-small;
        height: 50%;
        border: 0;
        border-radius: $jnt-corner-small;
        cursor: pointer;
        line-height: 0;
        background-color: transparent;
        &:focus {
          outline: 0;
        }
      }
    }
  }
}
