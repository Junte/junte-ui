@import "jnt-variables";
@import "jnt-functions";
@import "elements/icon/icon";
@import "layout/spinner/spinner";

@mixin input-size($size, $wrapper) {
  & {
    font-size: map-get($size, font-size);
    min-height: map-get($size, height);
    height: map-get($size, height);

    &[data-multiline='true'] {
      height: auto;
    }
  }
  #{$wrapper} [data-spinner] {
    @include jnt-spinner((
      size: map-get($size, state-icon),
    ), '&');
  }
  #{$wrapper} [data-warning], #{$wrapper} [data-checked] {
    [data-icon] {
      @include jnt-icon((
        size: map-get($size, state-icon),
      ), '&');
    }
  }
}

@mixin jnt-input($passed: (), $context: null, $deep: false, $strategy: 'changes') {

  $defs: (
    sizes: (
      small: (
        font-size: 11px,
        height: 30px,
        icon: 12px,
        chevron: 8px,
        state-icon: 16px,
      ),
      normal: (
        font-size: 14px,
        height: 38px,
        icon: 14px,
        chevron: 10px,
        state-icon: 18px,
      ),
      large: (
        font-size: 16px,
        height: 50px,
        icon: 16px,
        chevron: 12px,
        state-icon: 20px,
      ),
    ),
    scheme: (
      normal: (
        border-color: $jnt-control-border-color,
        hover: (
          border-color: $jnt-primary-color
        ),
        focus: (
          border-color: $jnt-primary-color,
          shadow: $jnt-outline-shadow-normal $jnt-secondary-dark-color,
        ),
        disabled: (
          border-color: $jnt-control-disabled-border-color
        ),
      ),
      success: (
        border-color: $jnt-success-color,
        hover: (
          border-color: $jnt-success-color
        ),
        focus: (
          border-color: $jnt-success-color,
          shadow: $jnt-outline-shadow-normal rgba($jnt-success-color, .5)
        ),
      ),
      failed: (
        border-color: $jnt-fail-color,
        hover: (
          border-color: $jnt-fail-color
        ),
        focus: (
          border-color: $jnt-fail-color,
          shadow: $jnt-outline-shadow-normal rgba($jnt-fail-color, .5)
        ),
      ),
    ),
  );

  $vars: $passed;
  $declare: false;
  $wrapper: null;

  @if $deep {
    $wrapper: '::ng-deep';
  }

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  :host, #{$context} {
    display: flex;
    width: 100%;
    background-color: $jnt-control-background;
    color: $jnt-primary-text-color;
    border-radius: $jnt-corner-small;
    border: 1px solid;
    line-height: 1;
    box-sizing: border-box;
    overflow: hidden;
    transition: border-color .3s;

    &:focus {
      outline: 0;
    }

    @if map-has-key($vars, scheme) {
      $schemes: map-get($vars, scheme);
      @each $scheme, $map in $schemes {
        &[data-scheme='#{$scheme}'] {
          border-color: map-get($map, border-color);
          @if map-has-key($map, hover) {
            $hover: map-get($map, hover);
            &:hover {
              border-color: map-get($hover, border-color);
            }
          }
          @if map-has-key($map, focus) {
            $focus: map-get($map, focus);
            &[data-focused='true'] {
              box-shadow: map-get($focus, shadow);
              border-color: map-get($focus, border-color);
              outline: 0;
            }
          }
          @if map-has-key($map, disabled) {
            $disabled: map-get($map, disabled);
            &[data-disabled='true'] {
              border-color: map-get($disabled, border-color);
              background-color: $jnt-control-disabled-background;
              pointer-events: none;

              #{$wrapper} form input,
              #{$wrapper} form textarea {
                color: $jnt-control-disabled-label-color;
                background-color: $jnt-control-disabled-background;
                pointer-events: none;
              }

              #{$wrapper} [data-arrows] {
                button {
                  cursor: default;
                }
              }
            }
          }
        }
      }
    }

    @if map-has-key($vars, sizes) {
      $sizes: map-get($vars, sizes);
      @each $size, $map in $sizes {
        &[data-size = '#{$size}'] {
          @include input-size($map, $wrapper);

          #{$wrapper} [data-label-icon],
          #{$wrapper} [data-reset] [data-icon] {
            @include jnt-icon((
              size: map-get($map, icon),
              color: $jnt-primary-text-light-color,
            ), '&');
          }

          #{$wrapper} [data-arrows] [data-icon],
          #{$wrapper} [data-reset] [data-icon] {
            @include jnt-icon((
              size: map-get($map, chevron)
            ), '&');
          }

        }
      }
    }

    &[data-textAlign="right"] {
      #{$wrapper} input, #{$wrapper} textarea {
        text-align: right;
      }
    }

    &[data-textAlign="left"] {
      #{$wrapper} input, #{$wrapper} textarea {
        text-align: left;
      }
    }

    &[data-state='loading'] {
      &,
      #{$wrapper} form [data-content] input,
      #{$wrapper} form [data-content] textarea {
        background-color: $jnt-control-disabled-background;
        color: $jnt-control-disabled-label-color;
        pointer-events: none;
      }
    }
  }

  #{$context} #{$wrapper} [data-label] {
    background-color: $jnt-control-field-label-background;
    padding: $jnt-control-field-label-padding;
    display: flex;
    align-items: center;
    color: $jnt-control-field-label-color;
    white-space: nowrap;
  }

  #{$context} #{$wrapper} form {
    display: flex;
    flex: 1;
    position: relative;
    max-width: 100%;

    &:focus {
      outline: 0;
    }

    [data-content] {
      flex: 1;
      max-width: 100%;
      box-sizing: border-box;
      padding: $jnt-gutter-small $jnt-gutter-small $jnt-gutter-small $jnt-gutter-normal;

      input, textarea {
        color: $jnt-primary-text-color;
        background-color: $jnt-control-background;
        border: 0;
        padding: 0;
        font-family: inherit;
        resize: none;
        position: relative;
        display: inline-block;
        width: 100%;
        min-width: 0;

        &:focus {
          outline: 0;
        }

        &:read-only {
          pointer-events: none;
        }
      }

      [data-warning] {
        color: $jnt-fail-color;
      }

      [data-checked] {
        color: $jnt-success-color;
      }

      [data-loading] {
        line-height: .8;
      }

      [data-view], [data-reset] {
        border: 0;
        background-color: transparent;
        color: $jnt-primary-color;
        cursor: pointer;
        padding: 0;
        line-height: 1;

        &:focus {
          outline: 0;
        }
      }
    }

    [data-arrows] {
      display: flex;
      flex-direction: column;

      button {
        flex: 1;
        padding: 0 $jnt-gutter-small;
        height: 50%;
        border: 0;
        border-radius: $jnt-corner-small;
        cursor: pointer;
        line-height: 0;
        background-color: transparent;
        color: $jnt-primary-text-light-color;

        &:focus {
          outline: 0;
        }

        &:first-child {
          padding-top: $jnt-gutter-tiny;
        }

        &:last-child {
          padding-bottom: $jnt-gutter-tiny;
        }
      }
    }
  }
}

@if $jnt-debug {
  @debug 'input compiled';
}
