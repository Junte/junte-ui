@import "jnt-variables";
@import "jnt-functions";
@import "elements/icon/icon";

@mixin jnt-switcher($passed: (), $context: null, $deep: false, $strategy: 'changes') {

  $defs: (
    corner: $jnt-corner-normal,
    horizontal: (
      height: 32px,
    ),
    vertical: (
      max-height: null,
    ),
    option: (
      active: (
        background: $jnt-primary-light-color,
        color: $jnt-white-color,
      ),
      align: null,
    )
  );

  $vars: $passed;
  $declare: false;
  $wrapper: null;

  @if $deep {
    $wrapper: '::ng-deep';
  }

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  :host, #{$context} {
    @if $declare {
      display: block;
      border: 1px solid $jnt-gray-700-color;
      position: relative;
      overflow: hidden;
      #{$wrapper} [data-options] {
        display: flex;

        [data-option] {
          background-color: $jnt-primary-background;
          color: $jnt-primary-text-color;
          user-select: none;
          overflow: hidden;
          cursor: pointer;
          padding: 0 $jnt-gutter-small;

          &[data-with-template] {
            padding: $jnt-gutter-small;
          }

          &[data-selected="false"]:hover {
            background-color: $jnt-highlight-background;
          }

          &:focus {
            box-shadow: $jnt-shadow-primary;
            outline: 0;
          }

          [data-title] {
            flex: 1;

            [data-label] {
              flex: 0 1 auto;
              overflow: hidden;
              white-space: nowrap;
            }
          }
        }
      }
    }
    border-radius: map-get($vars, corner);

    &[data-orientation='vertical'] {
      @if map-has-key($vars, vertical) {
        $vertical: map-get($vars, vertical);
        @if map-has-key($vertical, max-height) {
          #{$wrapper} [data-scroll] {
            max-height: map-get($vertical, max-height);
            overflow-y: auto;
          }
        }
      }

      #{$wrapper} [data-options] {
        flex-direction: column;
      }
    }

    &[data-orientation='horizontal'] {
      #{$wrapper} [data-options] {
        flex-direction: row;

        [data-option] {
          flex: auto;
          justify-content: center;
          @if map-has-key($vars, option) {
            $option: map-get($vars, option);
            [data-title] {
              justify-content: map-get($option, align);
            }
          }

          &:first-child {
            border-top-left-radius: calc(#{map-get($vars, corner)} - 1px);
            border-bottom-left-radius: calc(#{map-get($vars, corner)} - 1px);
          }

          &:last-child {
            border-top-right-radius: calc(#{map-get($vars, corner)} - 1px);
            border-bottom-right-radius: calc(#{map-get($vars, corner)} - 1px);
          }
        }
      }
    }

    &[data-disabled='true'] {
      cursor: default;
      pointer-events: none;

      #{$wrapper} [data-option] {
        color: $jnt-control-disabled-label-color;
        background-color: $jnt-control-disabled-background;
      }
    }
  }

  #{$context} #{$wrapper} [data-scroll] {
    border-radius: map-get($vars, corner);
  }

  #{$context} #{$wrapper} [data-options] {
    [data-option] {
      &[data-selected="true"] {
        @if map-has-key($vars, option) {
          $option: map-get($vars, option);
          @if map-has-key($option, active) {
            $active: map-get($option, active);
            color: map-get($active, color);
            background-color: map-get($active, background);
          }
        }
      }
    }
  }

  #{$context} #{$wrapper} [data-icon] {
    @include jnt-icon((color: $jnt-primary-color, size: 16px), '&');
  }

  #{$context} #{$wrapper} [data-switch] {
    position: relative;
    background-color: $jnt-control-background;
    border: 1px solid $jnt-primary-light-color;
    box-sizing: border-box;
    text-align: center;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: all .3s;
    min-width: 18px;
    width: 18px;
    min-height: 18px;
    height: 18px;

    &[data-single='true'] {
      border-radius: 50%;

      [data-indicator] {
        border-radius: 50%;
      }
    }

    &[data-single='false'] {
      border-radius: $jnt-corner-base;

      [data-indicator] {
        border-radius: 2px;
      }
    }

    [data-indicator] {
      background-color: $jnt-control-background;
      border: 1px solid $jnt-primary-light-color;
      min-width: 10px;
      width: 10px;
      min-height: 10px;
      height: 10px;
    }
  }

  #{$context} #{$wrapper} [data-title] {
    @if map-has-key($vars, horizontal) {
      $horizontal: map-get($vars, horizontal);
      line-height: map-get($horizontal, height);
    }
  }

  #{$context} #{$wrapper} [data-count] {
    position: absolute;
    right: 0;
    top: 0;
    transform: translate(-50%, 50%);
  }
}

