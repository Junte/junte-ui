@import "jnt-variables";
@import "jnt-functions";
@import "elements/badge/badge";
@import "elements/icon/icon";

@mixin button-fill($scheme, $wrapper) {
  #{$wrapper} button {
    color: map-get($scheme, inverse-color);
    background-color: map-get($scheme, color);
    &:hover {
      background-color: map-get($scheme, hover-color);
    }
    &:focus {
      box-shadow: 0 1px 5px map-get($scheme, color);
    }

    [data-badge] {
      @include jnt-badge((
        background: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null),
        color: if(map-get($scheme, color), map-get($scheme, color) !important, null)
      ), '&');
    }
  }
}

@mixin button-ghost($scheme, $wrapper) {

  #{$wrapper} button {
    color: map-get($scheme, color);
    background-color: transparent;
    border: 1px solid map-get($scheme, color);
    &:hover {
      background-color: map-get($scheme, color);
      color: map-get($scheme, inverse-color);

      [data-badge] {
        @include jnt-badge((
          background: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null),
          color: if(map-get($scheme, color), map-get($scheme, color) !important, null)
        ), '&');
      }
    }
    &:focus {
      box-shadow: 0 1px 5px #{map-get($scheme, color)};
    }

    [data-badge] {
      @include jnt-badge((
        background: if(map-get($scheme, color), map-get($scheme, color) !important, null),
        color: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null)
      ), '&');
    }
  }
  &[data-scheme=#{$jnt-scheme-secondary-name}] {
    #{$wrapper} button {
      color: map-get($scheme, inverse-color);
      border-color: map-get($scheme, inverse-color);
      &:hover {
        background-color: map-get($scheme, inverse-color);
        color: map-get($scheme, color);

        [data-badge] {
          @include jnt-badge((
            background: if(map-get($scheme, color), map-get($scheme, color) !important, null),
            color: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null)
          ), '&');
        }
      }
      [data-badge] {
        @include jnt-badge((
          background: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null),
          color: if(map-get($scheme, color), map-get($scheme, color) !important, null)
        ), '&');
      }
    }
  }
}

@mixin button-transparent($scheme, $wrapper) {

  #{$wrapper} button {
    color: map-get($scheme, color);
    background-color: transparent;
    border-color: transparent;
    &:hover {
      color: map-get($scheme, hover-color);
    }

    &:focus {
      outline-offset: 1px;
      outline: map-get($scheme, color) auto 1px;
    }

    [data-badge] {
      @include jnt-badge((
        background: if(map-get($scheme, color), map-get($scheme, color) !important, null),
        color: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null)
      ), '&');
    }
  }
  &[data-scheme=#{$jnt-scheme-secondary-name}] {
    #{$wrapper} button {
      color: map-get($scheme, inverse-color);
      &:hover {
        color: map-get($scheme, inverse-color);
      }
      [data-badge] {
        @include jnt-badge((
          background: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null),
          color: if(map-get($scheme, color), map-get($scheme, color) !important, null)
        ), '&');
      }
    }
  }
}

@mixin button-size($size, $wrapper) {
  #{$wrapper} button {
    padding: map-get($size, padding);
    height: map-get($size, height);
    font-size: map-get($size, font-size);
  }
  &[data-with-text="false"] {
    #{$wrapper} button {
      padding: map-get($size, padding-without-text);
    }
  }
}

@mixin jnt-button($passed: (), $context: null, $deep: false, $strategy: 'changes') {

  $defs: (
    corner: $jnt-corner-large,
    corners: (
      top: (
        left: null,
        right: null,
      ),
      bottom: (
        left: null,
        right: null,
      ),
    ),
    borders: (
      right: null,
      left: null,
      top: null,
      bottom: null
    ),
    without-text-corner: $jnt-corner-small,
    padding: null,
    icon: (
      margin: $jnt-gutter-small,
      size: 18px
    ),
    schemes: (
      primary: (
        color: $jnt-primary-color,
        inverse-color: $jnt-white-color,
        hover-color: $jnt-primary-dark-color,
      ),
      secondary: (
        color: $jnt-secondary-color,
        inverse-color: $jnt-gray-900-color,
        hover-color: $jnt-blue-100-color
      ),
      success: (
        color: $jnt-success-color,
        inverse-color: $jnt-white-color,
        hover-color: $jnt-success-dark-color
      ),
      fail: (
        color: $jnt-fail-color,
        inverse-color: $jnt-white-color,
        hover-color: $jnt-fail-dark-color
      ),
    ),
    sizes: (
      tiny: (
        padding: 0 20px,
        padding-without-text: 0 7px,
        font-size: 10px,
        height: 24px,
        badge: (
          size: 18px,
        ),
        icon: (
          size: 12px,
        ),
        spinner: (
          size: 8px
        ),
      ),
      small: (
        padding: 0 50px,
        padding-without-text: 0 10px,
        font-size: 12px,
        height: 30px,
        badge: (
          size: 24px,
        ),
        icon: (
          size: 14px,
        ),
        spinner: (
          size: 12px
        )
      ),
      normal: (
        padding: 0 38px,
        padding-without-text: 0 13px,
        font-size: 14px,
        height: 38px,
        badge: (
          size: 24px,
        ),
        icon: (
          size: 14px,
        ),
        spinner: (
          size: 16px
        )
      ),
      large: (
        padding: 0 36px,
        padding-without-text: 0 18px,
        font-size: 16px,
        height: 50px,
        badge: (
          size: 24px,
        ),
        icon: (
          size: 20px,
        ),
        spinner: (
          size: 18px
        )
      )
    )
  );

  $vars: $passed;
  $declare: false;
  $wrapper: null;

  @if $deep {
    $wrapper: '::ng-deep';
  }

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  :host, #{$context} {
    @if $declare {
      display: inline-flex;
      position: relative;
      max-width: 100%;
      #{$wrapper} button {
        display: flex;
        align-items: center;
        justify-content: center;
        transition: color .15s ease-in-out,
        background-color .15s ease-in-out,
        border-color .15s ease-in-out,
        box-shadow .15s ease-in-out;
        outline: 0;
        user-select: none;
        box-sizing: border-box;
        cursor: pointer;
        border: none;
        width: 100%;
        position: relative;
        font-family: $jnt-font-family-base;
        line-height: $jnt-line-height-base;
        overflow: hidden;
        [data-text] {
          line-height: 1em;
          white-space: nowrap;
        }
        [data-loading] {
          position: absolute;
        }
      }
      &[data-loading='true'] {
        #{$wrapper} button {
          cursor: default;
        }
      }
      &[data-disabled='true'] {
        opacity: .65;
        pointer-events: none;
        #{$wrapper} button {
          cursor: default;
        }
      }
      &[data-width='fluid'] {
        width: 100%;
      }
    }

    @if map-has-key($vars, schemes) {
      @each $scheme, $map in map-get($vars, schemes) {
        &[data-scheme='#{$scheme}'] {
          &[data-outline='#{$jnt-outline-fill-name}'] {
            @include button-fill($map, $wrapper);
          }
          &[data-outline='#{$jnt-outline-ghost-name}'] {
            @include button-ghost($map, $wrapper);
          }
          &[data-outline='#{$jnt-outline-transparent-name}'] {
            @include button-transparent($map, $wrapper);
          }
        }
      }
    }

    @if map-has-key($vars, sizes) {
      @each $size, $map in map-get($vars, sizes) {
        &[data-size='#{$size}'] {
          @include button-size($map, $wrapper);
          @if map-has-key($map, badge) {
            $badge: map-get($map, badge);
            [data-badge] {
              @include jnt-badge((
                size: map-get($badge, size)
              ), '&');
            }
          }
          @if map-has-key($map, icon) {
            $icon: map-get($map, icon);
            [data-icon] {
              @include jnt-icon((
                size: map-get($icon, size)
              ), '&');
            }
          }
          @if map-has-key($map, spinner) {
            $spinner: map-get($map, spinner);
            [data-loading] {
              width: map-get($spinner, size);
              min-width: map-get($spinner, size);
              height: map-get($spinner, size);
              min-height: map-get($spinner, size);
            }
          }
        }
      }
    }

    &[data-with-text="false"] {
      #{$wrapper} button {
        border-radius: map-get($vars, without-text-corner);
        @if map-has-key($vars, corners) {
          $corners: map-get($vars, corners);
          @if map-has-key($corners, top) {
            $top: map-get($corners, top);
            border-top-left-radius: map-get($top, left);
            border-top-right-radius: map-get($top, right);

          }
          @if map-has-key($corners, bottom) {
            $bottom: map-get($corners, bottom);
            border-bottom-right-radius: map-get($bottom, right);
            border-bottom-left-radius: map-get($bottom, left);
          }
        }
      }
    }
  }

  #{$context} #{$wrapper} button {
    border-radius: map-get($vars, corner);
    @if map-get($vars, padding) != null {
      padding: if(map-get($vars, padding), map-get($vars, padding) !important, null);
    }
    @if map-has-key($vars, corners) {
      $corners: map-get($vars, corners);
      @if map-has-key($corners, top) {
        $top: map-get($corners, top);
        border-top-left-radius: map-get($top, left);
        border-top-right-radius: map-get($top, right);

      }
      @if map-has-key($corners, bottom) {
        $bottom: map-get($corners, bottom);
        border-bottom-right-radius: map-get($bottom, right);
        border-bottom-left-radius: map-get($bottom, left);

      }
    }
    @if map-has-key($vars, borders) {
      $borders: map-get($vars, borders);
      border-right: if(map-get($borders, right), map-get($borders, right) !important, null);
      border-left: if(map-get($borders, left), map-get($borders, left) !important, null);
      border-top: if(map-get($borders, top), map-get($borders, top) !important, null);
      border-bottom: if(map-get($borders, bottom), map-get($borders, bottom) !important, null);
    }
  }
}
