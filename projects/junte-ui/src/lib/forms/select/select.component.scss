@import "jnt-variables";
@import "jnt-functions";
@import "elements/icon/icon";
@import "layout/responsive/responsive";

@mixin select-size($size, $wrapper) {
  #{$wrapper} [data-select] {
    font-size: map-get($size, font-size);
    min-height: map-get($size, height);

    &[data-has-icon = 'true'] {
      padding-left: calc(#{map-get($size, font-size)} + #{$jnt-gutter-small} + #{$jnt-gutter-small});
    }
  }
}

@mixin jnt-select($passed: (), $context: null, $deep: false, $strategy: 'changes') {

  $defs: (
    icon: (
      color: $jnt-primary-text-color,
    ),
    sizes: (
      small: (
        font-size: 11px,
        height: 30px,
        chips: (
          padding: 2px $jnt-gutter-large 2px $jnt-gutter-small
        ),
        input: (
          padding: 2px 0 2px $jnt-gutter-small
        ),
      ),
      normal: (
        font-size: 14px,
        height: 38px,
        chips: (
          padding: 3px $jnt-gutter-large 3px $jnt-gutter-small
        ),
        input: (
          padding: 3px 0 3px $jnt-gutter-small
        ),
      ),
      large: (
        font-size: 16px,
        height: 50px,
        chips: (
          padding: $jnt-gutter-small $jnt-gutter-large $jnt-gutter-small $jnt-gutter-small
        ),
        input: (
          padding: $jnt-gutter-small 0 $jnt-gutter-small $jnt-gutter-small
        ),
      ),
    ),
  );

  $vars: $passed;
  $declare: false;
  $wrapper: null;

  @if $deep {
    $wrapper: '::ng-deep';
  }

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  :host, #{$context} {
    display: inline-block;
    position: relative;
    min-width: 70px;
    color: $jnt-primary-text-color;
    line-height: $jnt-line-height-base;
    @include for-mobile() {
      border: 1px solid $jnt-control-border-color;
      border-radius: $jnt-corner-small;
    }
    @if map-has-key($vars, sizes) {
      $sizes: map-get($vars, sizes);
      @each $size, $map in $sizes {
        &[data-size = '#{$size}'] {
          @include select-size($map, $wrapper);

          [data-select] {
            ul li {
              input {
                font-size: map_get($map, font-size);
              }

              @if map-has-key($map, chips) {
                $chips: map-get($map, chips);
                padding: map-get($chips, padding);
              }
              @if map-has-key($map, input) {
                $input: map-get($map, input);
                &[data-query] {
                  padding: map-get($input, padding);
                }
              }
            }
          }
        }
      }
    }

    &[data-disabled='true'] {
      [data-select] {
        background-color: $jnt-control-disabled-background;
        border-color: $jnt-control-disabled-border-color;
        pointer-events: none;

        ul li {
          background-color: $jnt-control-disabled-background;
          color: $jnt-control-disabled-border-color;

          &[data-query] {
            background-color: transparent;
          }
        }

        [data-close], [data-toggle] {
          color: $jnt-control-disabled-border-color;
        }
      }
    }

    &[data-opened='true'] [data-select] {
      box-shadow: $jnt-shadow-primary;
      border-color: $jnt-primary-color;
      @include for-mobile() {
        box-shadow: none;
        border-radius: calc(#{$jnt-corner-small - 1px}) calc(#{$jnt-corner-small - 1px}) 0 0;
      }
    }

    &[data-mode='single'] {
      [data-select] ul {
        li {
          background-color: $jnt-primary-background;
          margin-left: -$jnt-gutter-tiny;
        }
      }

      &[data-opened='true'][data-search='true'] [data-select] {
        ul {
          li {
            display: none;

            &[data-query] {
              display: flex;
            }
          }
        }
      }

      &[data-empty='false'] {
        [data-select] ul {
          flex: 1;

          li {
            width: 100%;
          }
        }

        [data-query] {
          display: none;
        }
      }

      &[data-empty='true'] {
        [data-select] ul li[data-query] {
          padding-right: 0;
        }
      }

      &[data-allow-empty='false'] {
        [data-select] ul li {
          padding-right: $jnt-gutter-small;

          button[data-close] {
            display: none;
          }
        }
      }

      &[data-search='false'] {
        [data-select] ul li {
          margin-right: 0;
        }
      }
    }

    &[data-mode='multiple'] {
      &[data-empty='false'][data-search='false'] {
        [data-query] {
          display: none;
        }
      }
    }

    &[data-empty='false'] {
      &[data-opened='false'] {
        [data-query] {
          display: none;
        }
      }
    }

    &[data-search='false'] {
      [data-select] ul li {
        cursor: default;
      }
    }

    &[data-empty='true'], &[data-mode='single'] {
      [data-select] ul li[data-query] {
        flex: 1;

        input {
          width: 100%;
        }
      }
    }

    [data-disabled='true'] {
      [data-select] {
        ul li {
          background-color: $jnt-muted-color;

          &[data-query] {
            background-color: transparent;
          }
        }
      }
    }
  }

  #{$context} #{$wrapper} [data-select] {
    border: 1px solid $jnt-control-border-color;
    border-radius: $jnt-corner-small;
    background-color: $jnt-control-background;
    padding: $jnt-gutter-tiny $jnt-gutter-big $jnt-gutter-tiny $jnt-gutter-small;
    box-sizing: border-box;
    position: relative;
    @include for-mobile() {
      border: 0;
      border-radius: calc(#{$jnt-corner-small} - 1px);
    }

    > [data-icon] {
      position: absolute;
      top: 50%;
      left: $jnt-gutter-small;
      transform: translateY(-50%);
      @if map-has-key($vars, icon) {
        $icon: map-get($vars, icon);
        @include jnt-icon((
          color: map-get($icon, color)
        ), '&');
      }
    }

    &:focus {
      outline: 0;
    }

    ul {
      list-style: none;
      display: flex;
      flex-wrap: wrap;
      padding: 0;
      margin: 0 0 (-$jnt-gutter-tiny);

      li {
        display: flex;
        align-items: center;
        position: relative;
        background-color: $jnt-secondary-background;
        border-radius: $jnt-corner-small;
        margin-bottom: $jnt-gutter-tiny;

        [data-icon] {
          line-height: 0;
        }

        [data-empty-options] {
          width: 50px;
          height: 10px;
          background-color: $jnt-primary-text-light-color;
        }

        [data-close] {
          border: 0;
          background-color: transparent;
          position: absolute;
          top: 50%;
          transform: translateY(-50%);
          padding: 0 $jnt-gutter-small;
          color: $jnt-primary-text-light-color;
          right: 0;

          &:focus {
            outline: 0;
          }

          & > [data-icon] {
            @include jnt-icon((
              size: 11px
            ), '&');
          }
        }

        &:not(:last-child) {
          margin-right: $jnt-gutter-tiny;
        }

        &[data-query] {
          background-color: transparent;

          input {
            width: 20px;
            border: none;
            background-color: transparent;
            color: $jnt-primary-text-color;
            padding: 0;
            line-height: $jnt-line-height-base;
            font-family: inherit;

            &:focus {
              outline: none;
            }
          }
        }
      }
    }

    [data-toggle] {
      position: absolute;
      top: 0;
      bottom: 0;
      right: 0;
      border: 0;
      background-color: transparent;
      padding: 0 $jnt-gutter-small;
      color: $jnt-primary-text-light-color;

      &:focus {
        outline: 0;
      }

      & > [data-icon] {
        @include jnt-icon((
          size: 11px
        ), '&');
      }
    }
  }

  #{$context} #{$wrapper} [data-options] {
    width: 100%;
    background-color: $jnt-control-background;
    overflow: hidden;
    @include for-mobile() {
      position: static;
      margin-top: 0;
      border-radius: 0 0 calc(#{$jnt-corner-small} - 1px) calc(#{$jnt-corner-small} - 1px);
      box-shadow: none;
    }

    &[data-loading='true'] {
      min-height: 100px;
      height: auto;
    }

    [data-skeleton] {
      padding: $jnt-gutter-small;
    }

    [data-empty-options] {
      height: 200px;
      display: flex;
      justify-content: center;
      align-items: center;

      [data-icon] {
        font-size: 50px;
        color: $jnt-primary-text-light-color;
      }
    }

    [data-options-header] {
      padding: $jnt-gutter-small $jnt-gutter-small 0 $jnt-gutter-small;
    }

    ul {
      list-style: none;
      margin: 0;
      padding: 0;
      max-height: 200px;
      overflow-y: scroll;

      [data-loading] {
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: rgba($jnt-primary-background, .5);
      }

      li {
        cursor: pointer;
        padding: $jnt-gutter-small $jnt-gutter-normal;
        border-left: 2px solid transparent;

        [data-icon] {
          line-height: 0;
        }

        &:hover {
          background-color: $jnt-secondary-background;
          border-color: $jnt-primary-color;
        }
      }
    }
  }
}
