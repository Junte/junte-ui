@import 'jnt-variables';
@import 'jnt-functions';
@import 'jnt-hosts';
@import 'elements/icon/svg/svg-icon';
@import 'elements/icon/font/font-icon';
@import 'elements/icon/animated/animated-icon';

@mixin jnt-icon($passed: (), $context: null, $strategy: 'changes') {
  $defs: (
    color: $jnt-primary-text-color,
    size: null,
    stroke: null,
    sizes: (
      auto: (
        size: 24px
      ),
      tiny: (
        size: 12px
      ),
      small: (
        size: 14px
      ),
      normal: (
        size: 18px
      ),
      large: (
        size: 24px
      )
    )
  );

  $vars: $passed;
  $declare: false;

  $wrapper: null;
  @if $jnt-ng-deep {
    $wrapper: '::ng-deep';
  }

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  #{if($context, $context, $jnt-icon-host)} {
    @if $declare {
      display: inline-flex;
      vertical-align: middle;
      position: relative;

      @include jnt-svg-icon();
      @include jnt-font-icon();
      @include jnt-animated-icon();
    }

    &[data-has-color='false'] {
      [data-modifier] {
        [data-filled] {
          fill: map-get($vars, color);
        }
      }
    }

    &[data-type='font'] {
      #{$wrapper} [data-icon] {
        @include jnt-font-icon((
          color: map-get($vars, color),
          size: if(map-get($vars, size), map-get($vars, size) !important, null),
          line-height: if(map-get($vars, size), 1, null),
        ), '&');
      }
    }

    &[data-type='animated'] {
      #{$wrapper} [data-icon] {
        @include jnt-animated-icon((
          color: map-get($vars, color)
        ), '&');
        @if map-has-key($vars, size) {
          @include jnt-animated-icon((
            width: if(map-get($vars, size), map-get($vars, size) !important, null),
            height: if(map-get($vars, size), map-get($vars, size) !important, null)
          ), '&');
        }
      }
    }

    &[data-type='svg'] {
      #{$wrapper} [data-icon] {
        @include jnt-svg-icon((
          color: map-get($vars, color),
          stroke: map-get($vars, stroke),
        ), '&');
        @if map-has-key($vars, size) {
          @include jnt-svg-icon((
            width: if(map-get($vars, size), map-get($vars, size) !important, null),
            height: if(map-get($vars, size), map-get($vars, size) !important, null)
          ), '&');
        }
      }
    }

    @if map-has-key($vars, sizes) {
      @each $key, $size in map-get($vars, sizes) {
        &[data-size='#{$key}'] {
          &[data-type='font'] {
            &:not([data-size='auto']) {
              #{$wrapper} [data-icon] {
                @include jnt-font-icon((
                  size: map-get($size, size),
                  line-height: 1
                ), '&');
              }
            }
          }

          &[data-type='animated'] {
            #{$wrapper} [data-icon] {
              @include jnt-animated-icon((
                width: map-get($size, size),
                height: map-get($size, size)
              ), '&');
            }
          }

          &[data-type='svg'] {
            #{$wrapper} [data-icon] {
              @include jnt-svg-icon((
                width: map-get($size, size),
                height: map-get($size, size)
              ), '&');
            }
          }
        }
      }
    }
  }

  [data-modifier] {
    @if $declare {
      position: absolute;
      bottom: 0;
      right: 0;
      width: 10px;
      min-width: 10px;
      height: 10px;
      min-height: 10px;
      line-height: 10px;
    }
  }
}

@if $jnt-debug {
  @debug 'icon compiled';
}
