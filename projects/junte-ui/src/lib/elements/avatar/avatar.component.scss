@import "jnt-variables";
@import "jnt-functions";
@import "elements/avatar/common";
@import "elements/icon/icon";
@import "elements/dot/dot";

@mixin avatar-size($size, $wrapper) {
  min-width: map-get($size, avatar);
  width: map-get($size, avatar);
  min-height: map-get($size, avatar);
  height: map-get($size, avatar);
  #{$wrapper} [data-icon] {
    @include jnt-icon((size: map-get($size, icon)), '&');
  }
  #{$wrapper} [data-text] {
    font-size: map-get($size, font);
  }
  #{$wrapper} [data-dot] {
    @include jnt-dot((size: map-get($size, dot)), '&');
  }
}

@mixin shape($shape, $wrapper) {
  &, #{$wrapper} [data-wrapper] {
    border-radius: map-get($shape, border-radius);
  }
}

@mixin jnt-avatar($passed: (), $context: null, $strategy: 'changes') {

  $defs: (
    shapes: (
      circle: (
        border-radius: 50%
      ),
      square: (
        border-radius: 0
      )
    ),
    border: null,
    background: $jnt-secondary-background,
    icon: (
      color: rgba($jnt-primary-color, .4)
    ),
    text: (
      color: $jnt-primary-color,
      font-weight: $jnt-font-weight-bold
    ),
    sizes: $sizes
  );

  $vars: $passed;
  $declare: false;

  $wrapper: null;
  @if $jnt-ng-deep {
    $wrapper: '::ng-deep';
  }

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  :host, #{$context} {
    @if $declare {
      display: block;
      position: relative;
      box-sizing: border-box;
    }
    border: map-get($vars, border);
    $sizes: map-get($vars, sizes);
    @each $size, $map in $sizes {
      &[data-size='#{$size}'] {
        @include avatar-size($map, $wrapper);
      }
    }

    @if map-has-key($vars, shapes) {
      @each $shape, $map in map-get($vars, shapes) {
        &[data-shape='#{$shape}'] {
          @include shape($map, $wrapper);
        }
      }
    }
  }

  #{$wrapper} #{$context} [data-wrapper] {
    @if $declare {
      display: flex;
      justify-content: center;
      align-items: center;
      line-height: 0;
      box-sizing: border-box;
      overflow: hidden;
      min-width: 100%;
      width: 100%;
      min-height: 100%;
      height: 100%;
    }
    background-color: map-get($vars, background);

    [data-text] {
      @if map-has-key($vars, text) {
        $text: map-get($vars, text);
        color: map-get($text, color);
        font-weight: map-get($text, font-weight);
      }
    }

    [data-icon] {
      @if map-has-key($vars, icon) {
        $icon: map-get($vars, icon);
        @include jnt-icon((color: map-get($icon, color)), '&');
      }
    }

    [data-image] {
      @if $declare {
        width: 100%;
        height: 100%;
      }
    }
  }

  #{$wrapper} #{$context} [data-dot] {
    @if $declare {
      position: absolute;
      top: -2px;
      right: -2px;
    }
  }
}

@if $jnt-debug {
  @debug 'avatar compiled';
}
