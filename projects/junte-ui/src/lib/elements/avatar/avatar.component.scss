@import "jnt-variables";
@import "elements/avatar/common";

$avatar-shape-circle: 'circle';
$avatar-shape-square: 'square';

@mixin avatar-size($size) {
  min-width: #{map-get($size, size)};
  width: #{map-get($size, size)};
  min-height: #{map-get($size, size)};
  height: #{map-get($size, size)};
  [data-icon] {
    font-size: #{map-get($size, iconSize)};
  }
  [data-text] {
    font-size: #{map-get($size, textSize)};
  }
}

@mixin shape($property, $shape) {
  #{$property}: #{map-get($shape, border-radius)};

}

@mixin jnt-avatar($passed: (), $context: null, $strategy: 'changes') {

  $defs: (
    shapes: (
      circle: (
        border-radius: 50%
      ),
      square: (
        border-radius: 0
      )
    ),
  );

  $vars: $passed;
  $declare: false;

  @if $passed == () or $strategy == 'merge' {
    $vars: map-merge($defs, $passed);
    $declare: true;
  }

  :host, #{$context} {
    display: flex;
    justify-content: center;
    align-items: center;
    line-height: 0;
    background-color: $jnt-secondary-background;
    overflow: hidden;
    @each $size, $map in $avatar-sizes {
      &[data-size='#{$size}'] {
        @include avatar-size($map);
      }
    }

    @if map-has-key($vars, shapes) {
      $shapes: map-get($vars, shapes);
      @each $shape, $map in $shapes {
        &[data-shape='#{$shape}'] {
          @include shape(border-radius, $map);
        }
      }
    }

  }

  #{$context} [data-text] {
    color: $jnt-primary-color;
    font-weight: $jnt-font-weight-bold;
  }

  #{$context} [data-icon] {
    color: $jnt-secondary-dark-color;
  }

  #{$context} [data-image] {
    width: 100%;
    height: 100%;
  }
}
