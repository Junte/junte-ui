@import "variables";
@import "components/elements/badge/badge";
@import "components/elements/icon/icon";

@mixin link-fill($scheme) {
  [link] {
    color: map-get($scheme, inverse-color);
    background-color: map-get($scheme, color);
    padding: $gutter-tiny $gutter-small;
    &:hover {
      background-color: map-get($scheme, hover-color);
    }
    &:focus {
      box-shadow: 0 1px 5px #{map-get($scheme, color)};
    }
    [badge] {
      @include badge((
        background: map-get($scheme, inverse-color) !important,
        color: map-get($scheme, color) !important
      ), '&');
    }
  }
}

@mixin link-ghost($scheme) {

  [link] {
    color: map-get($scheme, color);
    background-color: transparent;
    border-color: map-get($scheme, color);
    padding: $gutter-tiny $gutter-small;
    &:hover {
      background-color: map-get($scheme, color);
      color: map-get($scheme, inverse-color);
      [badge] {
        @include badge((
          background: map-get($scheme, inverse-color) !important,
          color: map-get($scheme, color) !important
        ), '&');
      }
    }
    &:focus {
      box-shadow: 0 1px 5px #{map-get($scheme, color)};
    }
    [badge] {
      @include badge((
        background: map-get($scheme, color) !important,
        color: map-get($scheme, inverse-color) !important
      ), '&');
    }
  }
}

@mixin link-transparent($scheme) {

  [link] {
    color: map-get($scheme, color);
    background-color: transparent;
    border-color: transparent;
    padding: 0;
    border-radius: 0;
    &:hover {
      color: map-get($scheme, hover-color);
    }
    &:focus {
      outline-offset: 1px;
      outline: map-get($scheme, color) auto 1px;
    }
    [badge] {
      @include badge((
        background: map-get($scheme, color) !important,
        color: map-get($scheme, inverse-color) !important
      ), '&');
    }
    &[active="true"] {
      [title] {
        span {
          border-bottom: 1px solid map-get($scheme, color);
        }
      }
    }
  }
}

@mixin link($passed: (), $strategy: 'merge') {
  $defs: (
    corner: $corner-small,
    font-size: inherit,
    icon: (
      margin-right: $gutter-tiny,
      size: 18px
    ),
    badge: (
      margin-left: $gutter-small
    ),
    schemes: (
      primary: (
        color: $primary-color,
        inverse-color: $white-color,
        hover-color: $primary-dark-color,
      ),
      secondary: (
        color: $gray-900-color,
        inverse-color: $secondary-color,
        hover-color: $blue-100-color
      ),
      success: (
        color: $success-color,
        inverse-color: $white-color,
        hover-color: $success-dark-color
      ),
      fail: (
        color: $fail-color,
        inverse-color: $white-color,
        hover-color: $fail-dark-color
      ),
    ),
  );

  $vars: $passed;
  $declare: false;

  @if $passed == () or $strategy == 'merge' {
    $vars: map-merge($defs, $passed);
    $declare: true;
  }

  :host {
    @if $declare {
      display: inline-block;
      box-sizing: border-box;
      &[orphan='true'] {
        [link] {
          color: $primary-text-color !important;
          &:hover {
            color: $primary-text-dark-color !important;
          }
        }
      }
      &[disabled="true"] {
        [link] {
          opacity: .65;
          pointer-events: none;
          cursor: default;
        }
      }
      &[with-title='false'] {
        [link] [icon] {
          margin-right: 0;
        }
      }
      [link] {
        display: inline-block;
        text-decoration: none;
        box-sizing: border-box;
        cursor: pointer;
        width: 100%;
        &:focus {
          outline: none;
        }
        [title] {
          white-space: nowrap;
          [icon], span {
            transition: color .3s;
          }
        }
      }
    }

    @if map-has-key($vars, schemes) {
      @each $scheme, $map in map-get($vars, schemes) {
        &[scheme='#{$scheme}'] {
          &[outline='#{$outline-fill}'] {
            @include link-fill($map);
          }
          &[outline='#{$outline-ghost}'] {
            [link] {
              border: 1px solid transparent;
            }
            @include link-ghost($map);
          }
          &[outline='#{$outline-transparent}'] {
            @include link-transparent($map);
          }
        }
      }
    }
  }

  [link] {
    border-radius: map-get($vars, corner);
    [title] {
      @if map-has-key($vars, icon) {
        $icon: map-get($vars, icon);
        [icon] {
          margin-right: map-get($icon, margin-right);
          @include icon((
            size: map-get($icon, size)
          ), '&');

        }
      }
    }
    @if map-has-key($vars, badge) {
      $badge: map-get($vars, badge);
      [badge] {
        margin-left: map-get($badge, margin-left);
      }
    }
    &:active {
      [icon], [title] {
        color: $primary-color;
      }
    }
  }

}
