@import "../../assets/styles/variables";

$input-bg: white;

$input-padding-y: $gutter-normal;
$input-line-height: normal;

$input-disabled-bg: $gray-100;

$input-color: $text-color;
$input-border-color: $gray-600;
$input-border-width: 1px;
$input-box-shadow: none;

$input-failed-border-color: $fail-color;
$input-success-border-color: $success-color;

$input-corner: $corner-small;
$input-corner-lg: $corner-small;
$input-corner-sm: $corner-small;

$input-focus-bg: $input-bg;
$input-focus-shadow: $shadow-focus-primary-normal;

$input-hover-border-color: $primary-color;
$input-focus-border-color: $primary-color;

$input-font-size: $font-size-base;

$input-small-height: 30px;
$input-normal-height: 38px;
$input-large-height: 50px;

$input-small-font-size: 11px;
$input-normal-font-size: 14px;
$input-large-font-size: 16px;

$input-icon-spacing: $gutter-small;
$input-icon-color: $gray-800;

$sizes: (
  #{$size-small}: (
    font-size: $input-small-font-size,
    min-height: $input-small-height
  ),
  #{$size-normal}: (
    font-size: $input-normal-font-size,
    min-height: $input-normal-height
  ),
  #{$size-large}: (
    font-size: $input-large-font-size,
    min-height: $input-large-height
  )
)!default;

$states: (
  #{$state-normal}: (
    border-color: $input-border-color,
    bg-focus: $input-focus-bg,
    shadow-focus: $input-focus-shadow,
    border-color-hover: $input-hover-border-color,
    border-color-focus: $input-focus-border-color,
  ),
  #{$state-success}: (
    border-color: $input-success-border-color,
  ),
  #{$state-failed}: (
    border-color: $input-failed-border-color,
  )
);

@mixin state($state) {
  input {
    border-color: #{map-get($state, border-color)};
    &:focus {
      box-shadow: #{map-get($state, shadow-focus)};
      border-color: #{map-get($state, border-color-focus)};
    }
    &:hover {
      border-color: #{map-get($state, border-color-hover)};
    }
  }
};

@mixin size($size) {
  input {
    font-size: #{map-get($size, font-size)};
    min-height: #{map-get($size, min-height)};
  }
}


:host {
  display: inline-flex;
  position: relative;
  width: 100%;
  @each $state, $map in $states {
    &[state='#{$state}'] {
      @include state($map);
    }
  }

  @each $size, $map in $sizes {
    &[size='#{$size}'] {
      @include size($map);
      [icon] {
        font-size: #{map-get($map, font-size)};
        & + input {
          padding-left: calc(#{map-get($map, font-size)} + #{$input-padding-y} + #{$input-icon-spacing});
        }
      }
    }
  }
}

input {
  border: 0;
  outline: 0;
  background-color: $input-bg;
  color: $input-color;
  width: 100%;
  padding: 0 $input-padding-y;
  border-radius: $input-corner;
  border: $input-border-width solid $input-border-color;
  box-sizing: border-box;
  transition: all .3s;
  box-shadow: none;
  &:disabled {
    background-color: $input-disabled-bg;
    pointer-events: none;
  }
}

[icon] {
  position: absolute;
  top: 50%;
  left: $input-padding-y;
  transform: translateY(-50%);
  color: $input-icon-color;

}
