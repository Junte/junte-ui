@import "variables";
@import "components/elements/badge/badge";
@import "components/elements/icon/icon";

@mixin button-fill($scheme) {
  button {
    color: map-get($scheme, inverse-color);
    background-color: map-get($scheme, color);
    &:hover {
      background-color: map-get($scheme, hover-color);
    }
    &:focus {
      box-shadow: 0 1px 5px map-get($scheme, color);
    }

    [badge] {
      @include badge((
        background: map-get($scheme, inverse-color) !important,
        color: map-get($scheme, color) !important
      ), '&');
    }
  }
}

@mixin button-ghost($scheme) {

  button {
    color: map-get($scheme, color);
    background-color: transparent;
    border: 1px solid map-get($scheme, color);
    &:hover {
      background-color: map-get($scheme, color);
      color: map-get($scheme, inverse-color);

      [badge] {
        @include badge((
          background: map-get($scheme, inverse-color) !important,
          color: map-get($scheme, color) !important
        ), '&');
      }
    }
    &:focus {
      box-shadow: 0 1px 5px #{map-get($scheme, color)};
    }

    [badge] {
      @include badge((
        background: map-get($scheme, color) !important,
        color: map-get($scheme, inverse-color) !important
      ), '&');
    }
  }
  &[scheme=#{$scheme-secondary}] {
    button {
      color: map-get($scheme, inverse-color);
      border-color: map-get($scheme, inverse-color);
      &:hover {
        background-color: map-get($scheme, inverse-color);
        color: map-get($scheme, color);

        [badge] {
          @include badge((
            background: map-get($scheme, color) !important,
            color: map-get($scheme, inverse-color) !important
          ), '&');
        }
      }
      [badge] {
        @include badge((
          background: map-get($scheme, inverse-color) !important,
          color: map-get($scheme, color) !important
        ), '&');
      }
    }
  }
}

@mixin button-transparent($scheme) {

  button {
    color: map-get($scheme, color);
    background-color: transparent;
    border-color: transparent;
    &:hover {
      color: map-get($scheme, hover-color);
    }

    &:focus {
      outline-offset: 1px;
      outline: map-get($scheme, color) auto 1px;
    }

    [badge] {
      @include badge((
        background: map-get($scheme, color) !important,
        color: map-get($scheme, inverse-color) !important
      ), '&');
    }
  }
  &[scheme=#{$scheme-secondary}] {
    button {
      color: map-get($scheme, inverse-color);
      &:hover {
        color: map-get($scheme, inverse-color);
      }
      [badge] {
        @include badge((
          background: map-get($scheme, inverse-color) !important,
          color: map-get($scheme, color) !important
        ), '&');
      }
    }
  }
}

@mixin button-size($size) {
  button {
    padding: map-get($size, padding);
    height: map-get($size, height);
    font-size: map-get($size, font-size);
  }
  &[with-text="false"] {
    button {
      padding: map-get($size, padding-without-text);
    }
  }
}

@mixin button($passed: (), $strategy: 'merge') {

  $defs: (
    corner: $corner-large,
    without-text-corner: $corner-small,
    icon: (
      margin-right: $gutter-small,
      size: 18px
    ),
    badge: (
      margin-left: $gutter-small
    ),
    schemes: (
      primary: (
        color: $primary-color,
        inverse-color: $white-color,
        hover-color: $primary-dark-color,
      ),
      secondary: (
        color: $secondary-color,
        inverse-color: $gray-900-color,
        hover-color: $blue-100-color
      ),
      success: (
        color: $success-color,
        inverse-color: $white-color,
        hover-color: $success-dark-color
      ),
      fail: (
        color: $fail-color,
        inverse-color: $white-color,
        hover-color: $fail-dark-color
      ),
    ),
    sizes: (
      tiny: (
        padding: 0 20px,
        padding-without-text: 0 7px,
        font-size: 10px,
        height: 24px,
        badge: (
          size: 18px,
        ),
        icon: (
          size: 12px,
        ),
        spinner: (
          size: 8px
        ),
      ),
      small: (
        padding: 0 50px,
        padding-without-text: 0 10px,
        font-size: 12px,
        height: 30px,
        badge: (
          size: 24px,
        ),
        icon: (
          size: 14px,
        ),
        spinner: (
          size: 12px
        )
      ),
      normal: (
        padding: 0 38px,
        padding-without-text: 0 13px,
        font-size: 14px,
        height: 38px,
        badge: (
          size: 24px,
        ),
        icon: (
          size: 14px,
        ),
        spinner: (
          size: 16px
        )
      ),
      large: (
        padding: 0 36px,
        padding-without-text: 0 18px,
        font-size: 16px,
        height: 50px,
        badge: (
          size: 24px,
        ),
        icon: (
          size: 20px,
        ),
        spinner: (
          size: 18px
        )
      ),
    ),
  );

  $vars: $passed;
  $declare: false;

  @if $passed == () or $strategy == 'merge' {
    $vars: map-merge($defs, $passed);
    $declare: true;
  }

  :host {
    @if $declare {
      display: inline-flex;
      position: relative;
      max-width: 100%;
      button {
        display: flex;
        align-items: center;
        justify-content: center;
        transition: color .15s ease-in-out,
        background-color .15s ease-in-out,
        border-color .15s ease-in-out,
        box-shadow .15s ease-in-out;
        outline: 0;
        user-select: none;
        box-sizing: border-box;
        cursor: pointer;
        border: none;
        width: 100%;
        position: relative;
        font-family: $font-family-base;
        line-height: $line-height-base;
        [text] {
          line-height: 1em;
          white-space: nowrap;
        }
        [loading] {
          position: absolute;
        }
      }
      &[loading='true'] {
        button {
          cursor: default;
        }
      }
      &[disabled='true'] {
        opacity: .65;
        pointer-events: none;
        button {
          cursor: default;
        }
      }
      &[width='fluid'] {
        width: 100%;
      }
    }


    @if map-has-key($vars, schemes) {
      @each $scheme, $map in map-get($vars, schemes) {
        &[scheme='#{$scheme}'] {
          &[outline='#{$outline-fill}'] {
            @include button-fill($map);
          }
          &[outline='#{$outline-ghost}'] {
            [link] {
              border: 1px solid transparent;
            }
            @include button-ghost($map);
          }
          &[outline='#{$outline-transparent}'] {
            @include button-transparent($map);
          }
        }
      }
    }

    @if map-has-key($vars, sizes) {
      @each $size, $map in map-get($vars, sizes) {
        &[size='#{$size}'] {
          @include button-size($map);
          @if map-has-key($map, badge) {
            $badge: map-get($map, badge);
            [badge] {
              @include badge((
                size: map-get($badge, size)
              ), '&');
            }
          }
          @if map-has-key($map, icon) {
            $icon: map-get($map, icon);
            [icon] {
              @include icon((
                size: map-get($icon, size)
              ), '&');
            }
          }
          @if map-has-key($map, spinner) {
            $spinner: map-get($map, spinner);
            [loading][child-host=#{$jnt-spinner-host}] {
              width: map-get($spinner, size);
              min-width: map-get($spinner, size);
              height: map-get($spinner, size);
              min-height: map-get($spinner, size);
            }
          }
        }
      }
    }

    &[with-text="false"] {
      button {
        border-radius: map-get($vars, without-text-corner);
        [icon] {
          margin-right: 0;
        }
      }
    }
    button {
      border-radius: map-get($vars, corner);
      @if map-has-key($vars, icon) {
        $icon: map-get($vars, icon);
        [icon] {
          margin-right: map-get($icon, margin-right);
        }
      }

      @if map-has-key($vars, badge) {
        $badge: map-get($vars, badge);
        [badge] {
          margin-left: map-get($badge, margin-left);
        }
      }
    }
  }

}
