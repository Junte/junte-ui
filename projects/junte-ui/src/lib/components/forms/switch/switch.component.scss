@import "variables";

$switch-corner: 35px;
$switch-padding: 2px;

$switch-sizes: (
  #{$size-tiny}: (
    width: 30px,
    height: 18px,
    icon-font-size: 6px,
    icon-size: 10px,
    label-font-size: 6px,
  ),
  #{$size-small}: (
    width: 38px,
    height: 22px,
    icon-font-size: 8px,
    icon-size: 12px,
    label-font-size: 8px,
  ),
  #{$size-normal}: (
    width: 50px,
    height: 28px,
    icon-font-size: 11px,
    icon-size: 14px,
    label-font-size: 11px,
  ),
  #{$size-large}: (
    width: 67px,
    height: 36px,
    icon-font-size: 15px,
    icon-size: 16px,
    label-font-size: 14px,
  ),
);

@mixin size($size) {
  [switch] {
    min-width: #{map-get($size, width)};
    width: #{map-get($size, width)};
    min-height: #{map-get($size, height)};
    height: #{map-get($size, height)};
  }
  [label] {
    margin-left: calc(#{map-get($size, height)} - #{$switch-padding});
    font-size: #{map-get($size, label-font-size)};
  }
  input:checked + [switch] {
    [label] {
      margin-right: calc(#{map-get($size, height)} - #{$switch-padding});
    }
  }
  [slider] {
    width: calc(#{map-get($size, height)} - #{$switch-padding} * 2);
    height: calc(#{map-get($size, height)} - #{$switch-padding} * 2);
    [icon] {
      font-size: #{map-get($size, icon-font-size)};
      line-height: 0;
      &[type='svg'], &[type='animated'] {
        width: #{map-get($size, icon-size)};
        height: #{map-get($size, icon-size)};
      }
    }
  }
}

:host {
 display: block;
  @each $size, $map in $switch-sizes {
    &[size='#{$size}'] {
      @include size($map);
    }
  }
}

form {
  display: flex;
  align-items: center;
  position: relative;
  input {
    position: absolute;
    top: 0;
    z-index: 1;
    cursor: pointer;
    opacity: 0;
    bottom: 0;
    right: 0;
    left: 0;
    margin: 0;
    width: 100%;
    height: 100%;
    &:checked + [switch] {
      background-color: $primary-color;
      [label] {
        margin-left: 0;
        text-align: right;
      }
      [slider] {
        [icon] {
          color: $primary-color;
          fill: $primary-color;
        }
      }
    }
    &:checked + [switch] > [slider] {
      left: auto;
      right: #{$switch-padding};
    }
    &:disabled {
      cursor: default;
      & ~ label {
        color: $control-disabled-label-color;
      }
      & + [switch] {
        background-color: rgba($gray-600-color, .7);
        [slider] [icon] {
          color: rgba($gray-600-color, .7);
        }
      }
      &:checked {
        & + [switch] {
          background-color: rgba($primary-color, .5);
          [slider] [icon] {
            color: rgba($primary-color, .5);
          }
        }
      }
    }
    &:focus {
      & + [switch] {
        box-shadow: 0 1px 5px $primary-color;
      }
    }
  }
  label {
    padding-left: $control-gutter;
    color: $control-switch-label-color;
    user-select: none;
  }
  [switch] {
    position: relative;
    border-radius: $switch-corner;
    background-color: $gray-600-color;
    box-sizing: border-box;
    display: flex;
    align-items: center;
    padding: 0 $switch-padding;
    overflow: hidden;
    transition: all ease .4s;
    [slider] {
      border-radius: 50%;
      background-color: $white-color;
      position: absolute;
      left: $switch-padding;
      right: auto;
      top: 50%;
      transform: translateY(-50%);
      display: flex;
      justify-content: center;
      align-items: center;
      transition: all .3s;
      [icon] {
        color: $gray-600-color;
        fill: $gray-600-color;
      }
    }
    [label] {
      color: $white-color;
      margin-right: 0;
      width: 100%;
      text-align: left;
      overflow: hidden;
    }
  }
}











