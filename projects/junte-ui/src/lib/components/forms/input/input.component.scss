@import "../../../assets/styles/variables";

$input-padding-y: $gutter-normal !default;
$input-line-height: normal !default;
$input-color: $primary-text-color !default;
$input-border-width: 1px !default;
$input-box-shadow: none !default;
$input-corner: $corner-small !default;
$input-font-size: $font-size-base !default;
$input-icon-spacing: $gutter-small !default;
$input-icon-color: $primary-text-light-color !default;

$input-sizes: (
  #{$size-small}: (
    font-size: 11px,
    height: 30px,
    icon-size: 14px
  ),
  #{$size-normal}: (
    font-size: 14px,
    height: 38px,
    icon-size: 16px
  ),
  #{$size-large}: (
    font-size: 16px,
    height: 50px,
    icon-size: 18px
  )
)!default;

$states: (
  #{$state-normal}: (
    border-color: $control-border-color,
    bg-focus: $control-background,
    shadow-focus: $shadow-primary,
    border-color-hover: $primary-color,
    border-color-focus: $primary-color,
    border-color-disabled: $control-disabled-border-color
  ),
  #{$state-success}: (
    border-color: $success-color,
  ),
  #{$state-failed}: (
    border-color: $fail-color,
  )
) !default;

@mixin state($state) {
  input {
    border-color: #{map-get($state, border-color)};
    &:focus {
      box-shadow: #{map-get($state, shadow-focus)};
      border-color: #{map-get($state, border-color-focus)};
    }
    &:hover {
      border-color: #{map-get($state, border-color-hover)};
    }
    &:disabled {
      border-color: #{map-get($state, border-color-disabled)};
    }
  }
};

@mixin size($size) {
  input {
    font-size: #{map-get($size, font-size)};
    min-height: #{map-get($size, height)};
  }
  [icon] {
    width: #{map-get($size, icon-size)};
    height: #{map-get($size, icon-size)};
  }
}


:host {
  display: block;
  width: 100%;
  @each $state, $map in $states {
    &[state='#{$state}'] {
      @include state($map);
    }
  }

  @each $size, $map in $input-sizes {
    &[size='#{$size}'] {
      @include size($map);
      [icon] {
        font-size: #{map-get($map, font-size)};
        & + input {
          padding-left: calc(#{map-get($map, font-size)} + #{$input-padding-y} + #{$input-icon-spacing});
        }
      }
    }
  }
  &[textAlign="right"] {
    input {
      text-align: right;
    }
  }
  &[textAlign="left"] {
    input {
      text-align: left;
    }
  }
}

form {
  display: inline-flex;
  align-items: stretch;
  width: 100%;
  position: relative;
  & > [icon] {
    position: absolute;
    top: 50%;
    left: $input-padding-y;
    transform: translateY(-50%);
    color: $input-icon-color;
    fill: $input-icon-color;
  }
  input {
    outline: 0;
    background-color: $control-background;
    color: $input-color;
    width: 100%;
    padding: 0 $input-padding-y;
    border-radius: $input-corner;
    border: $input-border-width solid;
    box-sizing: border-box;
    transition: all .3s;
    &:disabled {
      background-color: $control-disabled-background;
      pointer-events: none;
    }
  }

  [label] {
    background-color: $control-field-label-background;
    padding: $control-field-label-padding;
    display: flex;
    align-items: center;
    border-top-left-radius: $input-corner - 1px;
    border-bottom-left-radius: $input-corner - 1px;
    color: $control-field-label-color;
    border: $input-border-width solid $control-field-label-border-color;
    border-right: 0;
    & ~ input {
      border-top-left-radius: 0;
      border-bottom-left-radius: 0;
    }
  }

  [arrows] {
    display: flex;
    flex-direction: column;
    position: absolute;
    top: 1px;
    right: 1px;
    bottom: 1px;
    button {
      flex: 1;
      width: 30px;
      display: flex;
      align-items: center;
      justify-content: center;
      border: 0;
      padding: 0;
      border-radius: $corner-small;
      cursor: pointer;
      &:focus {
        outline: 0;
      }
    }
  }
}


