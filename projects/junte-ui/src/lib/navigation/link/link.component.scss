@import "variables";
@import "elements/badge/badge";
@import "elements/icon/icon";

@mixin link-fill($scheme, $wrapper) {
  #{$wrapper} [link] {
    color: map-get($scheme, inverse-color);
    background-color: map-get($scheme, color);
    &:hover {
      background-color: map-get($scheme, hover-color);
    }
    &:focus {
      box-shadow: 0 1px 5px map-get($scheme, color);
    }
    [badge] {
      @include badge((
        background: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null),
        color: if(map-get($scheme, color), map-get($scheme, color) !important, null)
      ), '&');
    }
  }
}

@mixin link-ghost($scheme, $wrapper) {

  #{$wrapper} [link] {
    color: map-get($scheme, color);
    background-color: transparent;
    border: 1px solid map-get($scheme, color);
    &:hover {
      background-color: map-get($scheme, color);
      color: map-get($scheme, inverse-color);
      [badge] {
        @include badge((
          background: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null),
          color: if(map-get($scheme, color), map-get($scheme, color) !important, null)
        ), '&');
      }
    }
    &:focus {
      box-shadow: 0 1px 5px #{map-get($scheme, color)};
    }
    [badge] {
      @include badge((
        background: if(map-get($scheme, color), map-get($scheme, color) !important, null),
        color: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null)
      ), '&');
    }
  }
  &[scheme=#{$scheme-secondary}] {
    [link] {
      color: map-get($scheme, inverse-color);
      border-color: map-get($scheme, inverse-color);
      &:hover {
        background-color: map-get($scheme, inverse-color);
        color: map-get($scheme, color);

        [badge] {
          @include badge((
            background: if(map-get($scheme, color), map-get($scheme, color) !important, null),
            color: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null)
          ), '&');
        }
      }
      [badge] {
        @include badge((
          background: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null),
          color: if(map-get($scheme, color), map-get($scheme, color) !important, null)
        ), '&');
      }
    }
  }
}

@mixin link-transparent($scheme, $wrapper) {

  #{$wrapper} [link] {
    color: map-get($scheme, color);
    background-color: transparent;
    border-color: transparent;
    padding: 0;
    border-radius: 0;
    &:hover {
      color: map-get($scheme, hover-color);
    }
    &:focus {
      outline-offset: 1px;
      outline: map-get($scheme, color) auto 1px;
    }
    [badge] {
      @include badge((
        background: if(map-get($scheme, color), map-get($scheme, color) !important, null),
        color: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null)
      ), '&');
    }
    &[active="true"] {
      [title] {
        span {
          border-bottom: 1px solid map-get($scheme, color);
        }
      }

    }
  }
  &[scheme=#{$scheme-secondary}] {
    [link] {
      color: map-get($scheme, inverse-color);
      &:hover {
        color: map-get($scheme, inverse-color);
      }
      [badge] {
        @include badge((
          background: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null),
          color: if(map-get($scheme, color), map-get($scheme, color) !important, null),
        ), '&');
      }
      &[active="true"] {
        [title] {
          span {
            border-bottom: 1px solid map-get($scheme, inverse-color);
          }
        }
      }
    }
  }
}

@mixin link($passed: (), $context: null, $deep: false, $strategy: 'changes') {
  $defs: (
    corner: $jnt-corner-small,
    font-size: null,
    text-transform: null,
    padding: $jnt-gutter-tiny $jnt-gutter-small,
    display: inline,
    overflow: false,
    height: null,
    orphan-color: $jnt-primary-text-color,
    orphan-hover-color: $jnt-primary-text-dark-color,
    color: null,
    active: (
      underline: true,
      background-color: null,
      color: null,
    ),
    icon: (
      margin-right: $jnt-gutter-tiny,
      size: null
    ),
    badge: (
      margin-left: $jnt-gutter-small
    ),
    schemes: (
      primary: (
        color: $jnt-primary-color,
        inverse-color: $jnt-white-color,
        hover-color: $jnt-primary-dark-color,
      ),
      secondary: (
        color: $jnt-secondary-color,
        inverse-color: $jnt-gray-900-color,
        hover-color: $jnt-blue-100-color
      ),
      success: (
        color: $jnt-success-color,
        inverse-color: $jnt-white-color,
        hover-color: $jnt-success-dark-color
      ),
      fail: (
        color: $jnt-fail-color,
        inverse-color: $jnt-white-color,
        hover-color: $jnt-fail-dark-color
      ),
    ),
  );

  $vars: $passed;
  $declare: false;
  $wrapper: null;

  @if $deep {
    $wrapper: '::ng-deep';
  }

  @if $passed == () or $strategy == 'merge' {
    $vars: map-merge($defs, $passed);
    $declare: true;
  }

  :host, #{$context} {
    @if $declare {
      display: inline-block;
      box-sizing: border-box;
      &[disabled="true"] {
        [link] {
          opacity: .65;
          pointer-events: none;
          cursor: default;
        }
      }
      &[with-title='false'] {
        [link] [icon] {
          margin-right: 0 !important;
        }
      }
      #{$wrapper} [link] {
        text-decoration: none;
        box-sizing: border-box;
        cursor: pointer;
        width: 100%;
        &:focus {
          outline: none;
        }
        [title] {
          white-space: nowrap;
          [icon], span {
            transition: color .3s;
          }
        }
      }
    }

    &[orphan='true'] {
      #{$wrapper} [link] {
        pointer-events: none;
        color: if(map-get($vars, orphan-color), map-get($vars, orphan-color) !important, null);
        &:hover {
          color: if(map-get($vars, orphan-hover-color), map-get($vars, orphan-hover-color) !important, null);
        }
      }
    }

    @if map-has-key($vars, schemes) {
      @each $scheme, $map in map-get($vars, schemes) {
        &[scheme='#{$scheme}'] {
          &[outline='#{$outline-fill}'] {
            @include link-fill($map, $wrapper);
          }
          &[outline='#{$outline-ghost}'] {
            @include link-ghost($map, $wrapper);
          }
          &[outline='#{$outline-transparent}'] {
            @include link-transparent($map, $wrapper);
          }
        }
      }
    }
  }

  #{$context} #{$wrapper} [link] {
    @if map-get($vars, display) == inline {
      display: inline-block;
    }
    @if map-get($vars, display) == block {
      display: inline-flex;
      align-items: center;
      width: 100%;
      [title] {
        vertical-align: middle;
      }
    }
    @if map-has-key($vars, active) {
      $active: map-get($vars, active);
      &[active='true'] {
        background-color: map-get($active, background-color);
        color: if(map-get($active, color), map-get($active, color) !important, null);
        [title] span {
          border-bottom-color: if(map-get($active, color), map-get($active, color) !important, null);
        }
      }
      @if map-get($active, underline) == false {
        &[active='true'] {
          [title] span {
            border-bottom: 0;
          }
        }
      }
    }
    border-radius: map-get($vars, corner);
    padding: map-get($vars, padding);
    height: map-get($vars, height);
    font-size: map-get($vars, font-size);
    text-transform: map-get($vars, text-transform);
    @if map-has-key($vars, color) {
      color: if(map-get($vars, color), map-get($vars, color) !important, null);
    }
    [title] {
      @if map-has-key($vars, icon) {
        $icon: map-get($vars, icon);
        [icon] {
          margin-right: map-get($icon, margin-right);
          @include icon((
            size: map-get($icon, size),
            sizes: (
              auto: (
                size: map-get($icon, size),
              )
            )
          ), '&');

        }
      }
      @if map-get($vars, overflow) == true {
        text-overflow: ellipsis;
        overflow: hidden;
        max-width: 100%;
        display: inline-block;
      }
    }
    @if map-has-key($vars, badge) {
      $badge: map-get($vars, badge);
      [badge] {
        margin-left: map-get($badge, margin-left);
      }
    }
  }
}
