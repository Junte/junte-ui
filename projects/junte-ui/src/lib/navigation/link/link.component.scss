@import "jnt-variables";
@import "jnt-functions";
@import "elements/badge/badge";
@import "elements/icon/icon";

@mixin link-fill($scheme, $wrapper) {
  #{$wrapper} [data-link] {
    color: map-get($scheme, inverse-color);
    background-color: map-get($scheme, color);

    &:hover {
      background-color: map-get($scheme, hover-color);
    }

    &:focus {
      box-shadow: 0 1px 5px map-get($scheme, color);
    }

    [data-badge] {
      @include jnt-badge((
        background: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null),
        color: if(map-get($scheme, color), map-get($scheme, color) !important, null)
      ), '&');
    }
  }
}

@mixin link-ghost($scheme, $wrapper) {

  #{$wrapper} [data-link] {
    color: map-get($scheme, color);
    background-color: transparent;
    border: 1px solid map-get($scheme, color);

    &:hover {
      background-color: map-get($scheme, color);
      color: map-get($scheme, inverse-color);

      [data-badge] {
        @include jnt-badge((
          background: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null),
          color: if(map-get($scheme, color), map-get($scheme, color) !important, null)
        ), '&');
      }
    }

    &:focus {
      box-shadow: 0 1px 5px #{map-get($scheme, color)};
    }

    [data-badge] {
      @include jnt-badge((
        background: if(map-get($scheme, color), map-get($scheme, color) !important, null),
        color: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null)
      ), '&');
    }
  }
  &[data-scheme=#{$jnt-scheme-secondary-name}] {
    [data-link] {
      color: map-get($scheme, inverse-color);
      border-color: if(map-get($scheme, inverse-color), rgba(map-get($scheme, inverse-color), .5), null);

      &:hover {
        background-color: map-get($scheme, inverse-color);
        color: map-get($scheme, color);

        [data-badge] {
          @include jnt-badge((
            background: if(map-get($scheme, color), map-get($scheme, color) !important, null),
            color: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null)
          ), '&');
        }
      }

      [data-badge] {
        @include jnt-badge((
          background: if(map-get($scheme, inverse-color), map-get($scheme, inverse-color) !important, null),
          color: if(map-get($scheme, color), map-get($scheme, color) !important, null)
        ), '&');
      }
    }
  }
}

@mixin link-transparent($scheme, $wrapper) {

  #{$wrapper} [data-link] {
    color: map-get($scheme, color);
    background-color: transparent;
    border-color: transparent;
    padding: 0;

    &:focus {
      @if map-has-key($scheme, focus) {
        $focus: map-get($scheme, focus);
        @if map-get($focus, outline) != null {
          outline: map-get($focus, outline);
          outline-offset: map-get($focus, outline-offset);
        }
        @if map-get($focus, shadow) != null {
          outline: 0;
          box-shadow: map-get($focus, shadow);
        }
      }
    }

    &[data-active="true"] {
      [data-title] {
        span {
          @if map-get($scheme, color) {
            border-bottom: 1px solid map-get($scheme, color);
          }
        }
      }

    }
  }
  &[data-scheme=#{$jnt-scheme-secondary-name}] {
    [data-link] {
      color: map-get($scheme, inverse-color);

      &:hover {
        color: map-get($scheme, inverse-color);
      }

      &[data-active="true"] {
        [data-title] {
          span {
            border-bottom: 1px solid map-get($scheme, inverse-color);
          }
        }
      }
    }
  }
}

@mixin jnt-link($passed: (), $context: null, $deep: false, $strategy: 'changes') {
  $defs: (
    corner: $jnt-corner-small,
    font-size: $jnt-font-size-base,
    font-weight: null,
    text-transform: null,
    text-decoration: null,
    padding: $jnt-gutter-tiny $jnt-gutter-small,
    display: inline,
    overflow: false,
    height: null,
    orphan: (
      color: $jnt-primary-text-color,
      hover-color: $jnt-primary-text-dark-color,
      border: null,
    ),
    color: null,
    active: (
      underline: true,
      background-color: null,
      color: null,
      border-color: $jnt-primary-color,
    ),
    icon: (
      spacing: $jnt-gutter-tiny,
      size: null,
      sizes: 18px
    ),
    badge: (
      margin-left: $jnt-gutter-small
    ),
    schemes: (
      primary: (
        color: $jnt-primary-color,
        inverse-color: $jnt-white-color,
        hover-color: $jnt-primary-dark-color,
        focus: (
          outline: 1px solid $jnt-primary-light-color,
          outline-offset: 3px,
          shadow: null,
        ),
      ),
      secondary: (
        color: $jnt-secondary-color,
        inverse-color: $jnt-primary-text-color,
        hover-color: $jnt-secondary-dark-color,
        focus: (
          outline: 1px solid $jnt-gray-900-color,
          outline-offset: 3px,
          shadow: null,
        ),
      ),
      success: (
        color: $jnt-success-color,
        inverse-color: $jnt-white-color,
        hover-color: $jnt-success-dark-color,
        focus: (
          outline: 1px solid $jnt-success-color,
          outline-offset: 3px,
          shadow: null,
        ),
      ),
      fail: (
        color: $jnt-fail-color,
        inverse-color: $jnt-white-color,
        hover-color: $jnt-fail-dark-color,
        focus: (
          outline: 1px solid $jnt-fail-color,
          outline-offset: 3px,
          shadow: null,
        ),
      ),
    ),
  );

  $vars: $passed;
  $declare: false;
  $wrapper: null;

  @if $deep {
    $wrapper: '::ng-deep';
  }

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  :host, #{$context} {
    @if $declare {
      display: inline-block;
      box-sizing: border-box;
      max-width: 100%;
      &[data-disabled="true"] {
        [data-link] {
          opacity: .65;
          pointer-events: none;
          cursor: default;
        }
      }
      &[data-with-title='false'] {
        [data-link] [data-icon] {
          margin-right: 0 !important;
        }
      }
      #{$wrapper} [data-link] {
        text-decoration: none;
        box-sizing: border-box;
        cursor: pointer;
        width: 100%;

        &:focus {
          outline: none;
        }

        [data-title] {
          [data-icon], span {
            transition: color .3s;
          }
        }
      }
    }

    &[data-orphan='true'] {
      #{$wrapper} [data-link] {
        pointer-events: none;
        @if map-has-key($vars, orphan) {
          $orphan: map-get($vars, orphan);
          color: if(map-get($orphan, color), map-get($orphan, color) !important, null);
          border: if(map-get($orphan, border), map-get($orphan, border) !important, null);
          &:hover {
            color: if(map-get($orphan, hover-color), map-get($orphan, hover-color) !important, null);
          }
        }
      }
    }

    @if map-has-key($vars, icon) {
      $icon: map-get($vars, icon);
      &[data-position='left'] {
        [data-icon] {
          margin-right: map-get($icon, spacing);
        }
      }
      &[data-position='right'] {
        [data-icon] {
          margin-left: map-get($icon, spacing);
        }
      }
    }

    @if map-has-key($vars, schemes) {
      @each $scheme, $map in map-get($vars, schemes) {
        &[data-scheme='#{$scheme}'] {
          &[data-outline='#{$jnt-outline-fill-name}'] {
            @include link-fill($map, $wrapper);
          }

          &[data-outline='#{$jnt-outline-ghost-name}'] {
            @include link-ghost($map, $wrapper);
          }

          &[data-outline='#{$jnt-outline-transparent-name}'] {
            @include link-transparent($map, $wrapper);
          }
        }
      }
    }
  }

  #{$context} #{$wrapper} [data-link] {
    @if map-get($vars, display) == inline {
      display: inline-block;
    }
    @if map-get($vars, display) == block {
      display: inline-flex;
      align-items: center;
      width: 100%;
      [data-title] {
        vertical-align: middle;
      }
    }
    @if map-has-key($vars, active) {
      $active: map-get($vars, active);
      &[data-active='true'] {
        background-color: map-get($active, background-color);
        color: if(map-get($active, color), map-get($active, color) !important, null);
        @if map-get($active, underline) == true {
          [data-title] span {
            border-bottom-color: if(map-get($active, border-color), map-get($active, border-color), null);
          }
        }
        @if map-get($active, underline) == false {
          [data-title] span {
            border-bottom-color: transparent;
          }
        }
      }
    }
    border-radius: map-get($vars, corner);
    padding: map-get($vars, padding);
    height: map-get($vars, height);
    font-size: map-get($vars, font-size);
    font-weight: map-get($vars, font-weight);
    text-transform: map-get($vars, text-transform);
    text-decoration: map-get($vars, text-decoration);
    @if map-has-key($vars, color) {
      color: if(map-get($vars, color), map-get($vars, color) !important, null);
    }

    [data-title] {
      margin-right: auto;
      @if map-has-key($vars, icon) {
        $icon: map-get($vars, icon);
        [data-icon] {
          @include jnt-icon((
            size: map-get($icon, size),
            sizes: (
              auto: (
                size: map-get($icon, sizes)
              )
            )
          ), '&');

        }
      }
      @if map-get($vars, overflow) == true {
        text-overflow: ellipsis;
        overflow: hidden;
        max-width: 100%;
        display: inline-block;
        white-space: nowrap;
      }
    }

    @if map-has-key($vars, badge) {
      $badge: map-get($vars, badge);
      [data-badge] {
        margin-left: map-get($badge, margin-left);
      }
    }
  }
}

@if $jnt-debug {
  @debug 'link compiled';
}
