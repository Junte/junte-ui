@import 'jnt-variables';
@import 'jnt-functions';
@import 'navigation/link/link';

@mixin jnt-menu($passed: (), $context: null, $deep: false, $strategy: 'changes') {

  $defs: (
    top: (
      item: (
        corner: $jnt-corner-small,
        height: null,
        padding: $jnt-gutter-small,
        orphan: (
          color: $jnt-primary-text-light-color,
          hover: (
            color: $jnt-primary-text-dark-color,
            background-color: $jnt-highlight-background
          ),
        ),
        color: null,
        text-transform: null,
        font-weight: $jnt-font-weight-base,
        icon: (
          spacing: $jnt-gutter-small,
          size: 18px
        ),
        focus: (
          outline: null,
          shadow: inset $jnt-outline-shadow-small $jnt-primary-light-color,
        ),
        toggle: (
          toggle: true,
          margin-left: $jnt-gutter-small,
        ),
        hover: (
          color: null,
          background-color: $jnt-highlight-background,
        ),
        active: (
          underline: true,
          background-color: null,
          color: null,
          underline-color: $jnt-primary-color,
          shadow: null
        ),
        styles: (
          tags: (
            padding: $jnt-gutter-tiny $jnt-gutter-normal,
            color: $jnt-primary-light-color,
            corner: 19px,
            border: 1px solid $jnt-white-color,
            active: (
              underline: false,
              color: $jnt-white-color,
              background-color: $jnt-primary-light-color,
              border-color: $jnt-primary-light-color,
            ),
            hover: (
              color: null,
              background-color: $jnt-secondary-dark-color,
              border-color: null,
            ),
          ),
        ),
      ),
    ),
    sub: (
      width: 200px,
      background-color: $jnt-primary-background,
      shadow: $jnt-shadow-normal,
      corner: $jnt-corner-small,
      collapsed: (
        item: (
          padding: $jnt-gutter-small $jnt-gutter-normal,
        ),
      ),
      title: (
        padding: 0 $jnt-gutter-normal,
        border-bottom: 1px solid $jnt-muted-color,
      ),
      item: (
        padding: $jnt-gutter-small $jnt-gutter-normal,
        height: null,
        color: null,
        corner: 0,
        icon: (
          margin-right: $jnt-gutter-small,
          sizes: null
        ),
        hover: (
          background-color: $jnt-highlight-background,
          border-left-color: $jnt-primary-color,
        ),
        active: (
          underline: false,
          background-color: null,
          color: null,
        ),
        focus: (
          outline: null,
          shadow: inset $jnt-outline-shadow-small $jnt-primary-light-color,
        ),
      ),
    ),
  );

  $vars: $passed;
  $declare: false;
  $wrapper: null;

  @if $deep {
    $wrapper: '::ng-deep';
  }

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  :host, #{$context} {
    @if $declare {
      display: block;

      &[data-orientation='vertical'] {
        #{$wrapper} [top] {
          width: 100%;
        }
      }
      #{$wrapper} [data-top] {
        position: relative;
        white-space: nowrap;
        box-sizing: border-box;

        [data-item] {
          cursor: pointer;
          display: flex;
          align-items: center;
          user-select: none;

          &[data-loading='true'] {
            opacity: .7;
            pointer-events: none;
          }

          [data-link] {
            width: 100%;
            @include jnt-link((
              overflow: true,
              display: block,
            ), '&');
          }
        }
      }
    }

    &[data-style='default'] {
      #{$wrapper} [data-top] {
        [data-item] {
          @if map-has-key($vars, top) {
            $title: map-get(map-get($vars, top), item);
            @include jnt-link((
              height: map-get($title, height),
              color: map-get($title, color),
              corner: map-get($title, corner),
              text-transform: map-get($title, text-transform),
              font-weight: map-get($title, font-weight),
              padding: map-get($title, padding),
            ), '&');

            @if map-has-key($title, active) {
              $active: map-get($title, active);
              @include jnt-link((
                outlines: (
                  transparent: (
                    active: (
                      underline: map-get($active, underline),
                      background-color: map-get($active, background-color),
                      color: map-get($active, color),
                      underline-color: map-get($active, border-color),
                      shadow: map-get($active, shadow),
                    ),
                  ),
                ),
              ), '&');
            }

            @if map-has-key($title, orphan) {
              $orphan: map-get($title, orphan);
              @include jnt-link((
                outlines: (
                  transparent: (
                    orphan: (
                      color: map-get($orphan, color),
                    ),
                  ),
                ),
              ), '&');
              @if map-has-key($orphan, hover) {
                $hover: map-get($orphan, hover);
                @include jnt-link((
                  outlines: (
                    transparent: (
                      orphan: (
                        hover: (
                          color: map-get($hover, color),
                          background-color: map-get($hover, background-color),
                        ),
                      ),
                    ),
                  ),
                ), '&');
              }
            }

            @if map-has-key($title, icon) {
              $icon: map-get($title, icon);
              @include jnt-link((
                icon: (
                  spacing: map-get($icon, spacing),
                  size: map-get($icon, size)
                ),
              ), '&');
            }

            @if map-has-key($title, toggle) {
              $toggle: map-get($title, toggle);
              @include jnt-link((
                toggle: (
                  toggle: map-get($toggle, toggle),
                  margin-left: map-get($toggle, margin-left),
                )
              ), '&');
            }

            @if map-has-key($title, hover) {
              $hover: map-get($title, hover);
              @include jnt-link((
                outlines: (
                  transparent: (
                    hover: (
                      color: map-get($hover, color),
                      background-color: map-get($hover, background-color)
                    )
                  ),
                ),
              ), '&');
            }

            @if map-has-key($title, focus) {
              $focus: map-get($title, focus);
              [data-link] {
                @include jnt-link((
                  schemes: (
                    primary: (
                      focus: (
                        outline: map-get($focus, outline),
                        shadow: map-get($focus, shadow),
                      ),
                    ),
                  ),
                ), '&');
              }
            }

            [data-spinner] {
              margin-right: $jnt-gutter-tiny;
            }
          }
        }
      }
    }

    &[data-style='tabs'] {
      border-bottom: 2px solid $jnt-secondary-color;

      #{$wrapper} [data-link] {
        @include jnt-link((
          padding: $jnt-gutter-small $jnt-gutter-normal,
          color: $jnt-primary-text-color
        ), '&');

        &:after {
          content: '';
          position: absolute;
          bottom: -2px;
          left: 0;
          right: 0;
          height: 4px;
          border-radius: 5px;
          display: none;
        }

        &:hover {
          @include jnt-link((
            color: $jnt-primary-light-color
          ), '&');

          &:after {
            display: block;
            background-color: $jnt-secondary-dark-color;
          }
        }

        &[data-active='true'] {
          @include jnt-link((
            outlines: (
              transparent: (
                active: (
                  underline: false,
                  color: $jnt-primary-light-color
                )
              )
            )
          ), '&');

          &:after {
            display: block;
            background-color: $jnt-primary-light-color;
          }
        }
      }
    }

    &[data-style='tags'] {
      #{$wrapper} [data-link] {
        @if map-has-key($vars, top) {
          $title: map-get(map-get($vars, top), item);
          @if map-has-key($title, styles) {
            $styles: map-get($title, styles);
            @if map-has-key($styles, tags) {
              $tags: map-get($styles, tags);
              @include jnt-link((
                padding: map-get($tags, padding),
                color: map-get($tags, color),
                border: map-get($tags, border),
                corner: map-get($tags, corner),
              ), '&');
              &[data-active='true'] {
                @if map-has-key($tags, active) {
                  $active: map-get($tags, active);
                  @include jnt-link((
                    outlines: (
                      transparent: (
                        active: (
                          underline: map-get($active, underline),
                          color: map-get($active, color),
                          background-color: map-get($active, background-color),
                          border-color: map-get($active, border-color),
                        ),
                      ),
                    ),
                  ), '&');
                }
              }
              &[data-active='false']:hover {
                @if map-has-key($tags, hover) {
                  $hover: map-get($tags, hover);
                  @include jnt-link((
                    hover: (
                      color: map-get($hover, color),
                      background-color: map-get($hover, background-color),
                      border-color: map-get($hover, border-color),
                    ),
                  ), '&');
                }
              }
            }
          }
        }
      }
    }
  }

  #{$context} #{$wrapper} [data-sub] {
    width: 100%;
    display: none;
    align-items: stretch;
    flex-direction: column;

    &[data-opened='true'],
    &[data-orientation='horizontal'],
    &[data-orientation='vertical'][data-collapsed='true'] {
      display: flex;
    }

    > [data-section] {
      user-select: none;

      span {
        display: block;
        padding: $jnt-gutter-normal 0;
      }
    }

    [data-link] {
      user-select: none;
      @include jnt-link((
        overflow: true,
        display: block,
      ), '&');
    }
  }

  #{$context} #{$wrapper} [data-sub] {
    @if map-has-key($vars, sub) {
      $sub: map-get($vars, sub);
      &[data-collapsed='true'] {
        @if map-has-key($sub, collapsed) {
          $collapsed: map-get($sub, collapsed);
          @if map-has-key($collapsed, item) {
            $item: map-get($collapsed, item);
            [data-link] {
              @include jnt-link((
                outlines: (
                  transparent: (
                    padding: map-get($item, padding)
                  )
                ),
              ), '&');
            }
          }
        }
      }
      min-width: map-get($sub, width);
      @if map-has-key($sub, title) {
        $title: map-get($sub, title);
        > [data-section] {
          padding: map-get($title, padding);

          span {
            border-bottom: map-get($title, border-bottom);
          }
        }
      }

      @if map-has-key($sub, item) {
        $item: map-get($sub, item);
        [data-link] {
          @include jnt-link((
            height: map-get($item, height),
            color: map-get($item, color),
            corner: map-get($item, corner),
            outlines: (
              transparent: (
                padding: map-get($item, padding)
              )
            ),
          ), '&');
          @if map-has-key($item, icon) {
            $icon: map-get($item, icon);
            @include jnt-link((
              icon: (
                margin-right: map-get($icon, margin-right),
                sizes: map-get($icon, sizes)
              ),
            ), '&');
          }
          @if map-has-key($item, hover) {
            $hover: map-get($item, hover);
            &:hover {
              background-color: map-get($hover, background-color);
              border-left-color: map-get($hover, border-left-color);
            }
          }

          @if map-has-key($item, focus) {
            $focus: map-get($item, focus);
            @include jnt-link((
              schemes: (
                primary: (
                  focus: (
                    outline: map-get($focus, outline),
                    shadow: map-get($focus, shadow),
                  ),
                ),
              ),
            ), '&');
          }

          @if map-has-key($item, active) {
            $active: map-get($item, active);
            @include jnt-link((
              outlines: (
                transparent: (
                  active: (
                    underline: map-get($active, underline),
                    background-color: map-get($active, background-color),
                    color: map-get($active, color),
                    border-color: map-get($active, border-color)
                  ),
                ),
              ),
            ), '&');
          }
        }
      }
    }
  }
}

@if $jnt-debug {
  @debug 'menu compiled';
}
