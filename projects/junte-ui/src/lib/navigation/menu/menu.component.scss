@import "jnt-variables";
@import "jnt-functions";
@import "navigation/link/link";

@mixin jnt-menu($passed: (), $context: null, $deep: false, $strategy: 'changes') {

  $defs: (
    top: (
      item: (
        corner: $jnt-corner-small,
        height: null,
        orphan-color: $jnt-primary-text-color,
        orphan-hover-color: $jnt-primary-text-dark-color,
        color: null,
        text-transform: null,
        font-weight: $jnt-font-weight-base,
        icon: (
          spacing: $jnt-gutter-small,
          size: 18px
        ),
        focus: (
          outline: null,
          shadow: inset $jnt-outline-shadow-small $jnt-primary-light-color,
        ),
        padding: (
          inner: $jnt-gutter-small !important,
          outer: 0,
        ),
        toggle: (
          toggle: true,
          margin-left: $jnt-gutter-small,
          margin-right: $jnt-gutter-normal,
        ),
        hover: (
          background-color: $jnt-highlight-background,
        ),
        active: (
          underline: true,
          background-color: null,
          color: null,
          border-color: $jnt-primary-color,
        ),
      ),
    ),
    sub: (
      width: 200px,
      background-color: $jnt-primary-background,
      shadow: $jnt-shadow-normal,
      corner: $jnt-corner-small,
      collapsed: (
        position: null,
        top: null,
        left: null,
        item: (
          padding: $jnt-gutter-small $jnt-gutter-normal,
        ),
      ),
      title: (
        padding: 0 $jnt-gutter-normal,
        border-bottom: 1px solid $jnt-muted-color,
      ),
      item: (
        padding: $jnt-gutter-small $jnt-gutter-normal !important,
        height: null,
        color: null,
        icon: (
          margin-right: $jnt-gutter-small,
          sizes: null
        ),
        hover: (
          background-color: $jnt-highlight-background,
          border-left-color: $jnt-primary-color,
        ),
        active: (
          underline: true,
          background-color: null,
          color: null,
          border-color: $jnt-primary-color,
        ),
        focus: (
          outline: null,
          shadow: inset $jnt-outline-shadow-small $jnt-primary-light-color,
        ),
      ),
    ),
  );

  $vars: $passed;
  $declare: false;
  $wrapper: null;

  @if $deep {
    $wrapper: '::ng-deep';
  }

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  :host, #{$context} {
    @if $declare {
      display: block;
      &[data-orientation='horizontal'] {
        #{$wrapper} [data-sub] {
          position: absolute;
          top: 100% !important;
          left: 0;
          z-index: 1;
        }
      }
      &[data-orientation='vertical'] {
        #{$wrapper} [top] {
          width: 100%;
        }
      }

      #{$wrapper} [data-top] {
        position: relative;
        white-space: nowrap;
        box-sizing: border-box;

        [data-item] {
          cursor: pointer;
          display: flex;
          align-items: center;
          user-select: none;

          &[data-loading='true'] {
            opacity: .7;
            pointer-events: none;
          }

          [data-link] {
            width: 100%;
            @include jnt-link((
              overflow: true,
              display: block,
            ), '&');
          }
        }

        [data-sub] {
          width: 100%;
          display: none;
          align-items: stretch;
          flex-direction: column;

          &[data-opened='true'] {
            display: flex;
          }

          > [data-section] {
            user-select: none;

            span {
              display: block;
              padding: $jnt-gutter-normal 0;
            }
          }

          [data-link] {
            user-select: none;
            @include jnt-link((
              overflow: true,
              display: block,
            ), '&');
          }
        }
      }
    }
  }

  :host, #{$context} {
    &[data-orientation='horizontal'], &[data-collapsed='true'] {
      #{$wrapper} [data-sub] {
        @if map-has-key($vars, sub) {
          $sub: map-get($vars, sub);
          background-color: map-get($sub, background-color);
          box-shadow: map-get($sub, shadow);
          border-radius: map-get($sub, corner);
        }
      }
    }

    &[data-collapsed='true'] {
      #{$wrapper} [data-sub] {
        @if map-has-key($vars, sub) {
          $sub: map-get($vars, sub);
          @if map-has-key($sub, collapsed) {
            $collapsed: map-get($sub, collapsed);
            position: map-get($collapsed, position);
            top: map-get($collapsed, top);
            left: map-get($collapsed, left);
            @if map-has-key($collapsed, item) {
              $item: map-get($collapsed, item);
              [data-link] {
                @include jnt-link((
                  padding: map-get($item, padding),
                ), '&');
              }
            }
          }
        }
      }
    }
  }


  #{$context} #{$wrapper} [data-top] {
    [data-item] {
      @if map-has-key($vars, top) {
        $title: map-get(map-get($vars, top), item);
        border-radius: map-get($title, corner);
        @include jnt-link((
          height: map-get($title, height),
          orphan-color: map-get($title, orphan-color),
          orphan-hover-color: map-get($title, orphan-hover-color),
          color: map-get($title, color),
          text-transform: map-get($title, text-transform),
          font-weight: map-get($title, font-weight),
        ), '&');

        @if map-has-key($title, active) {
          $active: map-get($title, active);
          @include jnt-link((
            active: (
              underline: map-get($active, underline),
              background-color: map-get($active, background-color),
              color: map-get($active, color),
              border-color: map-get($active, border-color),
            ),
          ), '&');
        }

        @if map-has-key($title, icon) {
          $icon: map-get($title, icon);
          @include jnt-link((
            icon: (
              spacing: map-get($icon, spacing),
              size: map-get($icon, size)
            ),
          ), '&');
        }

        @if map-has-key($title, padding) {
          $padding: map-get($title, padding);
          padding: map-get($padding, outer);
          [data-link] {
            @include jnt-link((
              padding: map-get($padding, inner),
            ), '&');
          }
        }

        @if map-has-key($title, toggle) {
          $toggle: map-get($title, toggle);
          @if map-get($toggle, toggle) == false {
            [data-toggle] {
              display: none;
            }
          }
          [data-toggle] {
            margin-left: map-get($toggle, margin-left);
            margin-right: map-get($toggle, margin-right);
          }
        }

        @if map-has-key($title, hover) {
          $hover: map-get($title, hover);
          &:hover {
            background-color: map-get($hover, background-color);
          }
        }

        @if map-has-key($title, focus) {
          $focus: map-get($title, focus);
          [data-link] {
            @include jnt-link((
              schemes: (
                primary: (
                  focus: (
                    outline: map-get($focus, outline),
                    shadow: map-get($focus, shadow),
                  ),
                ),
              ),
            ), '&');
          }
        }
      }
    }

    [data-sub] {
      @if map-has-key($vars, sub) {
        $sub: map-get($vars, sub);
        min-width: map-get($sub, width);
        @if map-has-key($sub, title) {
          $title: map-get($sub, title);
          > [data-section] {
            padding: map-get($title, padding);

            span {
              border-bottom: map-get($title, border-bottom);
            }
          }
        }

        @if map-has-key($sub, item) {
          $item: map-get($sub, item);
          [data-link] {
            @include jnt-link((
              height: map-get($item, height),
              padding: map-get($item, padding),
              color: map-get($item, color),
            ), '&');
            @if map-has-key($item, icon) {
              $icon: map-get($item, icon);
              @include jnt-link((
                icon: (
                  margin-right: map-get($icon, margin-right),
                  sizes: map-get($icon, sizes)
                ),
              ), '&');
            }
            @if map-has-key($item, hover) {
              $hover: map-get($item, hover);
              &:hover {
                background-color: map-get($hover, background-color);
                border-left-color: map-get($hover, border-left-color);
              }
            }

            @if map-has-key($item, focus) {
              $focus: map-get($item, focus);
              @include jnt-link((
                schemes: (
                  primary: (
                    focus: (
                      outline: map-get($focus, outline),
                      shadow: map-get($focus, shadow),
                    ),
                  ),
                ),
              ), '&');
            }

            @if map-has-key($item, active) {
              $active: map-get($item, active);
              @include jnt-link((
                active: (
                  underline: map-get($active, underline),
                  background-color: map-get($active, background-color),
                  color: map-get($active, color),
                  border-color: map-get($active, border-color)
                ),
              ), '&');
            }
          }
        }
      }
    }
  }
}

@if $jnt-debug {
  @debug 'menu compiled';
}
