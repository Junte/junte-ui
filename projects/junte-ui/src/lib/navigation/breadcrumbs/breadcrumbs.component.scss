@import 'jnt-variables';
@import 'jnt-functions';
@import 'jnt-hosts';
@import 'elements/icon/icon';
@import 'layout/responsive/responsive';

@mixin jnt-breadcrumbs($passed: (), $context: null, $strategy: 'changes') {

  $defs: (
    padding: 0 0 0 $jnt-gutter-normal,
    margin: $jnt-gutter-small 0 $jnt-gutter-small 0
  );

  $vars: $passed;
  $declare: false;
  $wrapper: null;

  @if $jnt-ng-deep {
    $wrapper: '::ng-deep';
  }

  @if $passed == () or $strategy == 'merge' {
    $vars: recursive-map-merge($defs, $passed);
    $declare: true;
  }

  #{if($context, $context, $jnt-breadcrumbs-host)} {
    @if $declare {
      display: flex;
      align-items: center;
    }
    padding: map-get($vars, padding);
    margin: map-get($vars, margin);

    @include max-for-tablet() {
      &[data-with-aside='true'] {
        @if $declare {
          min-height: $app-aside-burger-height;
          margin-top: 0;
          padding-left: calc(#{$app-aside-burger-width} + #{$jnt-gutter-normal});
        }
      }
    }
  }

  #{$context} #{$wrapper} a {
    @if $declare {
      color: $jnt-primary-text-light-color;
      font-size: 12px;
      text-decoration: none;
      user-select: none;
      white-space: nowrap;

      &:hover {
        color: $jnt-primary-color;
      }

      &[data-disabled='true'] {
        pointer-events: none;
        cursor: default;
      }

      &:last-of-type {
        color: $jnt-primary-text-dark-color;
        pointer-events: none;
        cursor: default;
      }
    }
  }

  #{$context} #{$wrapper} [data-icon] {
    @if $declare {
      @include jnt-icon((
        color: $jnt-primary-text-light-color,
        size: 8px
      ), '&');

      &:last-child {
        display: none;
      }
    }
  }
}

@if $jnt-debug {
  @debug 'breadcrumbs compiled';
}
